import os
import random
import logging
import getpass
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = "8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw"
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")]],
    resize_keyboard=True,
)

gender_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

class BioStates(StatesGroup):
    waiting_fio = State()
    waiting_age = State()
    waiting_nationality = State()
    waiting_gender = State()

# ----------------- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ------------------

CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–Æ–∂–Ω—ã–π", "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ", "–ú–æ—Ä—Å–∫–æ–µ",
    "–ë—É—Å–∞–µ–≤–æ", "–ì–æ—Ä–∫–∏", "–ù–æ–≤—ã–π –ê—Ä–∑–∞–º–∞—Å", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫"
]

STREETS = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–õ–µ—Å–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–°–æ–ª–Ω–µ—á–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è",
    "–®–æ—Å—Å–µ–π–Ω–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ü–æ–±–µ–¥—ã", "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–ú–∏—Ä–∞",
    "–û–∑–µ—Ä–Ω–∞—è", "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è", "–¢—Ä—É–¥–æ–≤–∞—è", "–°–µ–≤–µ—Ä–Ω–∞—è"
]

ORGANIZATIONS = [
    "–°–ú–ò", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–æ–ª—å–Ω–∏—Ü–∞", "–ì–ò–ë–î–î", "–£–ú–í–î", "–§–°–ë", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–§–°–ò–ù"
]

JOBS = [
    "—Ä—ã–±–æ–ª–æ–≤", "—Ç–∞–∫—Å–∏—Å—Ç", "–≤–æ–¥–æ–ª–∞–∑", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ú–ß–°",
    "—Ä–∞–±–æ—Ç–Ω–∏–∫ —à–∞—Ö—Ç—ã", "—Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –∑–∞–≤–æ–¥–µ", "—Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —Ñ–µ—Ä–º–µ", "–∫–ª–∞–¥–æ–∏—Å–∫–∞—Ç–µ–ª—å",
    "–∏–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä", "–¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫"
]

def generate_address():
    city = random.choice(CITIES)
    street = random.choice(STREETS)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    address = f"–≥. {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}"
    return address, city

def generate_bio(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = data.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    gender = data.get("gender", "–ú—É–∂—Å–∫–æ–π")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∂—Å–∫–æ–π
    education = random.choice([
        "–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ", "–°—Ä–µ–¥–Ω–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "–í—ã—Å—à–µ–µ", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ"
    ])
    org = random.choice(ORGANIZATIONS)
    job = random.choice(JOBS)
    address, city = generate_address()
    parent_address, _ = generate_address()
    army_status = (
        random.choice([
            "–ü—Ä–æ—Ö–æ–¥–∏–ª —Å—Ä–æ—á–Ω—É—é —Å–ª—É–∂–±—É, —É–≤–æ–ª–µ–Ω –≤ –∑–∞–ø–∞—Å.",
            "–°–ª—É–∂–±—É –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ.",
            "–ü—Ä–æ—Ö–æ–¥–∏–ª –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –≥—Ä–∞–∂–¥–∞–Ω—Å–∫—É—é —Å–ª—É–∂–±—É.",
            "–ü—Ä–æ—Ö–æ–¥–∏–ª —Å–ª—É–∂–±—É, –ø–æ–ª—É—á–∏–ª –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è."
        ])
        if gender == "–ú—É–∂—Å–∫–æ–π" else
        "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É."
    )
    family = random.choice([
        "–û—Ç–µ—Ü ‚Äî –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –º–∞—Ç—å ‚Äî –ú–∞—Ä–∏–Ω–∞. –ï—Å—Ç—å –º–ª–∞–¥—à–∞—è —Å–µ—Å—Ç—Ä–∞.",
        "–°–µ–º—å—è –ø–æ–ª–Ω–∞—è: —Ä–æ–¥–∏—Ç–µ–ª–∏ –∏ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç.",
        "–û—Ç–µ—Ü ‚Äî –≤–µ—Ç–µ—Ä–∞–Ω, –º–∞—Ç—å ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û–¥–∏–Ω —Ä–µ–±—ë–Ω–æ–∫ –≤ —Å–µ–º—å–µ.",
        "–ú–∞–º–∞ ‚Äî –¥–æ–º–æ—Ö–æ–∑—è–π–∫–∞, –æ—Ç–µ—Ü ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å. –ë—Ä–∞—Ç—å–µ–≤ –∏ —Å–µ—Å—Ç—ë—Ä –Ω–µ—Ç."
    ])
    appearance = (
        random.choice([
            "–†–æ—Å—Ç 180 —Å–º, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, –≤–æ–ª–æ—Å—ã —Ç—ë–º–Ω—ã–µ, –≥–ª–∞–∑–∞ –∫–∞—Ä–∏–µ.",
            "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–ø–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã, –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞.",
            "–ö—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, –≤–æ–ª–æ—Å—ã —Ä—É—Å—ã–µ, –≥–ª–∞–∑–∞ –∑–µ–ª—ë–Ω—ã–µ.",
            "–†–æ—Å—Ç 175 —Å–º, —Ç—ë–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –±–æ—Ä–æ–¥–∞, –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–∑–≥–ª—è–¥."
        ]) if gender == "–ú—É–∂—Å–∫–æ–π" else
        random.choice([
            "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, —Å—Ç—Ä–æ–π–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã, –∑–µ–ª—ë–Ω—ã–µ –≥–ª–∞–∑–∞.",
            "–†–æ—Å—Ç 168 —Å–º, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, –¥–ª–∏–Ω–Ω—ã–µ —Ä—É—Å—ã–µ –≤–æ–ª–æ—Å—ã, –∫–∞—Ä–∏–µ –≥–ª–∞–∑–∞.",
            "–•—Ä—É–ø–∫–∞—è, –Ω–µ–≤—ã—Å–æ–∫–æ–≥–æ —Ä–æ—Å—Ç–∞, —Ç—ë–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥.",
            "–†–æ—Å—Ç 165 —Å–º, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø—Ä–∏—á—ë—Å–∫–∞, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞, –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞."
        ])
    )
    character = random.choice([
        "–°–ø–æ–∫–æ–π–Ω—ã–π, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, –Ω–æ —É–º–µ–µ—Ç –ø–æ—Å—Ç–æ—è—Ç—å –∑–∞ —Å–µ–±—è.",
        "–°–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, –Ω–∞–¥—ë–∂–Ω—ã–π, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –Ω–µ –ª–µ–∑–µ—Ç –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–µ—Ä–≤—ã–º.",
        "–£–º–Ω—ã–π, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π.",
        "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
    ]) if gender == "–ú—É–∂—Å–∫–æ–π" else random.choice([
        "–î–æ–±—Ä–∞—è, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–∞—è, –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –±–ª–∏–∑–∫–∏—Ö.",
        "–°–¥–µ—Ä–∂–∞–Ω–Ω–∞—è, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–∞—è, —É–º–µ–µ—Ç –ø–æ—Å—Ç–æ—è—Ç—å –∑–∞ —Å–µ–±—è –∏ –¥—Ä—É–∑–µ–π.",
        "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤–∞—è, –æ–±–ª–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.",
        "–û–±—â–∏—Ç–µ–ª—å–Ω–∞—è, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è, —É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã."
    ])
    marital_status = random.choice([
        "–ù–µ –∂–µ–Ω–∞—Ç.", "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.", "–ñ–µ–Ω–∞—Ç.", "–†–∞–∑–≤–µ–¥—ë–Ω."
    ]) if gender == "–ú—É–∂—Å–∫–æ–π" else random.choice([
        "–ù–µ –∑–∞–º—É–∂–µ–º.", "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.", "–ó–∞–º—É–∂–µ–º.", "–†–∞–∑–≤–µ–¥–µ–Ω–∞."
    ])
    is_convicted = random.choice([
        "–ù–µ—Ç.", "–ù–µ —Å—É–¥–∏–º.", "–°—É–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    ])
    hobbies = random.choice([
        "–§—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª, –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã.",
        "–ß—Ç–µ–Ω–∏–µ, –ø–ª–∞–≤–∞–Ω–∏–µ, –ø–æ—Ö–æ–¥—ã –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É.",
        "–ë–æ–∫—Å, —Å—Ç—Ä–µ–ª—å–±–∞, —Ä—ã–±–∞–ª–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.",
        "–í–æ–∂–¥–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ, –º—É–∑—ã–∫–∞."
    ])
    achievements = random.choice([
        "–ë—ã–ª –æ—Ç–º–µ—á–µ–Ω –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∑–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.",
        "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        "–ü–æ–≤—ã—à–µ–Ω –¥–æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ.",
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.",
        "–ù–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –Ω–∞–≥—Ä–∞–∂–¥—ë–Ω –ø–æ—á—ë—Ç–Ω—ã–º–∏ –≥—Ä–∞–º–æ—Ç–∞–º–∏ –∑–∞ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä—É–¥.",
        "–ò–º–µ–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.",
        "–°—Ç–∞–ª –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
        ""
    ])

    childhood_blocks = [
        f"–Ø —Ä–æ–¥–∏–ª—Å—è –≤ –≥–æ—Ä–æ–¥–µ {city}, –≤ –æ–±—ã—á–Ω–æ–π —Å–µ–º—å–µ. –†–æ–¥–∏—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –º–æ–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–∏–≤–∞–ª–∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –æ–∫—Ä—É–∂–∞—é—â–∏–º.",
        f"–î–µ—Ç—Å—Ç–≤–æ –ø—Ä–æ–≤—ë–ª –ø–æ –∞–¥—Ä–µ—Å—É: {parent_address}. –ß–∞—Å—Ç–æ –∏–≥—Ä–∞–ª –≤–æ –¥–≤–æ—Ä–µ —Å –¥—Ä—É–∑—å—è–º–∏, –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–ø–æ—Ä—Ç–æ–º, –ø–æ–º–æ–≥–∞–ª —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ —Ö–æ–∑—è–π—Å—Ç–≤—É.",
        "–° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –ø—Ä–æ—è–≤–ª—è–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–µ–º–µ—Å–ª—É, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —à–∫–æ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –ª—é–±–∏–ª –º–∞—Å—Ç–µ—Ä–∏—Ç—å –ø–æ–¥–µ–ª–∫–∏.",
        "–í —à–∫–æ–ª–µ —É—á–∏–ª—Å—è —Ö–æ—Ä–æ—à–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤–∏–ª–∏—Å—å —É—Ä–æ–∫–∏ –û–ë–ñ –∏ –∏—Å—Ç–æ—Ä–∏–∏.",
        "–ú–æ–π –æ—Ç–µ—Ü –≤—Å–µ–≥–¥–∞ —É—á–∏–ª –º–µ–Ω—è –¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–æ –∏ –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º.",
        "–ö–∞–∂–¥–æ–µ –ª–µ—Ç–æ –ø—Ä–æ–≤–æ–¥–∏–ª —É –±–∞–±—É—à–∫–∏ –≤ –¥–µ—Ä–µ–≤–Ω–µ, –≥–¥–µ –Ω–∞—É—á–∏–ª—Å—è —Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä—É–¥ –∏ —É–≤–∞–∂–∞—Ç—å –ø—Ä–∏—Ä–æ–¥—É.",
        "–° –º–∞–ª—ã—Ö –ª–µ—Ç –º–µ—á—Ç–∞–ª —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É –æ–±—â–µ—Å—Ç–≤—É.",
        "–í –¥–µ—Ç—Å—Ç–≤–µ —á–∞—Å—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö."
    ]
    childhood = "\n".join(random.sample(childhood_blocks, k=5))

    youth_blocks = [
        f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∫–æ–ª—ã –ø–æ—Å—Ç—É–ø–∏–ª –≤ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {education.lower()}.",
        f"–í —é–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å: —Å–Ω–∞—á–∞–ª–∞ {job}, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∏–ª –æ–ø—ã—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö.",
        "–°–µ—Ä—å—ë–∑–Ω–æ —É–≤–ª—ë–∫—Å—è —Å–ø–æ—Ä—Ç–æ–º ‚Äî –ø–æ—Å–µ—â–∞–ª —Å–µ–∫—Ü–∏—é –±–æ–∫—Å–∞, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö.",
        "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö, –ø–æ–º–æ–≥–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        "–ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—É–∫–∞–º–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö.",
        "–í–æ –≤—Ä–µ–º—è —É—á—ë–±—ã –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö, —á—Ç–æ –¥–∞–ª–æ —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç.",
        "–í 18 –ª–µ—Ç –±—ã–ª –ø—Ä–∏–∑–≤–∞–Ω –Ω–∞ —Å–ª—É–∂–±—É, –≥–¥–µ –∑–∞–∫–∞–ª–∏–ª —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–∞—É—á–∏–ª—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ.",
        "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É—á—ë–±–æ–π –ø–æ–¥—Ä–∞–±–∞—Ç—ã–≤–∞–ª, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ–º—å—é."
    ]
    youth = "\n".join(random.sample(youth_blocks, k=5))

    present_blocks = [
        f"–°–µ–π—á–∞—Å –º–Ω–µ {age} –ª–µ—Ç. –ü—Ä–æ–∂–∏–≤–∞—é –ø–æ –∞–¥—Ä–µ—Å—É: {address}.",
        f"–†–∞–±–æ—Ç–∞—é –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {org}, –∑–∞–Ω–∏–º–∞—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é: {job}.",
        "–°—Ç–∞—Ä–∞—é—Å—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ—Å–µ—â–∞—é –∫—É—Ä—Å—ã –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏.",
        "–í –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ –ø–æ–ª—å–∑—É—é—Å—å —É–≤–∞–∂–µ–Ω–∏–µ–º, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å.",
        f"–í —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω–∏–º–∞—é—Å—å —Ö–æ–±–±–∏: {hobbies.lower()}",
        "–ü–ª–∞–Ω–∏—Ä—É—é –≤ –±—É–¥—É—â–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç.",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–µ–º—å—ë–π –∏ –¥—Ä—É–∑—å—è–º–∏, —É—á–∞—Å—Ç–≤—É—é –≤ –∂–∏–∑–Ω–∏ —Ä–∞–π–æ–Ω–∞.",
        achievements if achievements else "–°—á–∏—Ç–∞—é –≥–ª–∞–≤–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º ‚Äî —É–≤–∞–∂–µ–Ω–∏–µ –∏ –¥–æ–≤–µ—Ä–∏–µ –∫–æ–ª–ª–µ–≥."
    ]
    present = "\n".join(random.sample(present_blocks, k=5))

    result = (
        f"<b>–§–ò–û:</b> {fio}\n"
        f"<b>–ü–æ–ª:</b> {gender}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {city}\n"
        f"<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {education}\n"
        f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {org}\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å/—Ä–∞–±–æ—Ç–∞:</b> {job}\n"
        f"<b>–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–æ–∏–Ω—Å–∫–æ–π —Å–ª—É–∂–±–µ:</b> {army_status}\n"
        f"<b>–°–µ–º—å—è:</b> {family}\n"
        f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏:</b> {parent_address}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:</b> {appearance}\n"
        f"<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:</b> {character}\n"
        f"<b>–í–∞—à–µ —Ñ–æ—Ç–æ:</b> –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b>\n{childhood}\n\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å:</b>\n{youth}\n\n"
        f"<b>–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è:</b>\n{present}\n\n"
        f"<b>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {marital_status}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {address}\n"
        f"<b>–ò–º–µ–µ—Ç—Å—è –ª–∏ —Å—É–¥–∏–º–æ—Å—Ç—å?:</b> {is_convicted}\n"
        f"<b>–í–∞—à–µ —Ö–æ–±–±–∏:</b> {hobbies}"
    )
    return result

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RP Biography Bot!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ <b>—Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—é</b> –¥–ª—è –º–∏—Ä–∞ <b>Black Russia</b> –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º —Å–µ—Ä–≤–µ—Ä–∞.\n"
        "–ë–æ—Ç –∑–∞–¥–∞—Å—Ç —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–±–µ—Ä—ë—Ç –∞–Ω–∫–µ—Ç—É ‚Äî –∞ –¥–∞–ª—å—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é, –≥—Ä–∞–º–æ—Ç–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    await message.answer(text, reply_markup=menu_kb, parse_mode="HTML")

@dp.message(lambda m: m.text == "üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")
async def start_bio(message: types.Message, state: FSMContext):
    await state.set_state(BioStates.waiting_fio)
    await message.answer(
        "<b>1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>\n"
        "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π.",
        parse_mode="HTML"
    )

@dp.message(BioStates.waiting_fio)
async def bio_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    if "_" in fio or not all(x.isalpha() or x.isspace() for x in fio):
        await message.answer(
            "‚ö†Ô∏è <b>–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>",
            parse_mode="HTML"
        )
        return
    await state.update_data(fio=fio)
    await state.set_state(BioStates.waiting_age)
    await message.answer(
        "<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n"
        "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç <b>18</b> –¥–æ <b>65</b> –ª–µ—Ç.",
        parse_mode="HTML"
    )

@dp.message(BioStates.waiting_age)
async def bio_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è <b>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            parse_mode="HTML"
        )
        return
    await state.update_data(age=age)
    await state.set_state(BioStates.waiting_nationality)
    await message.answer(
        "<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–†—É—Å—Å–∫–∏–π, –¢–∞—Ç–∞—Ä–∏–Ω, –ê—Ä–º—è–Ω–∏–Ω, –ß–µ—á–µ–Ω–µ—Ü, –ò—Ç–∞–ª—å—è–Ω–µ—Ü –∏ —Ç.–ø.</i>",
        parse_mode="HTML"
    )

@dp.message(BioStates.waiting_nationality)
async def bio_nationality(message: types.Message, state: FSMContext):
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    await state.set_state(BioStates.waiting_gender)
    await message.answer(
        "<b>4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>",
        reply_markup=gender_kb,
        parse_mode="HTML"
    )

@dp.message(BioStates.waiting_gender)
async def bio_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip()
    if gender not in ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"):
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π.</b>",
            reply_markup=gender_kb,
            parse_mode="HTML"
        )
        return
    await state.update_data(gender=gender)
    data = await state.get_data()
    bio_text = generate_bio(data)
    await message.answer(
        "<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è:</b>\n\n" + bio_text,
        parse_mode="HTML",
        reply_markup=menu_kb
    )
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
