import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio

API_TOKEN = "8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw"

# --- FSM STATES ---
class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class UniversalBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()

class PurpleBioStates(StatesGroup):
    waiting_nickname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()

# --- KEYBOARDS ---
exit_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –°–æ–∑–¥–∞—Ç—å –†–ü-–ë–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üì© –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")]
    ],
    resize_keyboard=True
)
server_names = [
    "RED", "GREEN", "BLUE", "YELLOW", "ORANGE",
    "PURPLE", "LIME", "PINK", "CHERRY", "BLACK"
]
server_callbacks = [
    "server_red", "server_green", "server_blue", "server_yellow", "server_orange",
    "server_purple", "server_lime", "server_pink", "server_cherry", "server_black"
]
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text=server_names[i], callback_data=server_callbacks[i])] for i in range(10)]
)
contact_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url="https://t.me/BUNKOC")]
    ]
)

# --- GENERATION UTILS ---

def random_appearance():
    heights = [str(h) + " —Å–º" for h in range(160, 201, 5)]
    weights = [str(w) + " –∫–≥" for w in range(50, 101, 5)]
    eyes = ["–ö–∞—Ä–∏–µ", "–ì–æ–ª—É–±—ã–µ", "–°–µ—Ä—ã–µ", "–ó–µ–ª–µ–Ω—ã–µ", "–ß–µ—Ä–Ω—ã–µ"]
    hairs = ["–†—É—Å—ã–µ", "–ö–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "–¢–µ–º–Ω—ã–µ", "–°–≤–µ—Ç–ª–æ-—Ä—É—Å—ã–µ", "–ß–µ—Ä–Ω—ã–µ", "–¢–µ–º–Ω–æ-—Ä—É—Å—ã–µ", "–ë–ª–æ–Ω–¥"]
    body = ["–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–ö—Ä–µ–ø–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–•—É–¥–æ—â–∞–≤–æ–µ", "–ü–ª–æ—Ç–Ω–æ–µ"]
    return (
        f"–†–æ—Å—Ç: {random.choice(heights)}\n"
        f"–í–µ—Å: {random.choice(weights)}\n"
        f"–¶–≤–µ—Ç –≥–ª–∞–∑: {random.choice(eyes)}\n"
        f"–í–æ–ª–æ—Å—ã: {random.choice(hairs)}\n"
        f"–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {random.choice(body)}"
    )

def random_hobby():
    hobbies = [
        "–ë–æ–∫—Å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω", "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "–ú—É–∑—ã–∫–∞", 
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥", "–°–ø–æ—Ä—Ç", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 
        "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–ò–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–õ—ã–∂–∏", "–í–µ–ª–æ—Å–ø–æ—Ä—Ç"
    ]
    return ", ".join(random.sample(hobbies, random.randint(2, 4)))

def random_education():
    return random.choice([
        "–í—ã—Å—à–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", 
        "–í—ã—Å—à–µ–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞)", "–í—ã—Å—à–µ–µ (—é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è)", 
        "–í—ã—Å—à–µ–µ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞)", "–í—ã—Å—à–µ–µ (–∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–µ –¥–µ–ª–æ)", "–í—ã—Å—à–µ–µ (–∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞)"
    ])

def random_marital():
    return random.choice([
        "–ù–µ –∂–µ–Ω–∞—Ç", "–ñ–µ–Ω–∞—Ç", "–†–∞–∑–≤–µ–¥—ë–Ω", "–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ", "–í–¥–æ–≤–∞/–≤–¥–æ–≤–µ—Ü"
    ])

def random_city():
    return random.choice([
        "–ê—Ä–∑–∞–º–∞—Å", "–Æ–∂–Ω—ã–π", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
    ])

def random_date_of_birth(age: int):
    today = datetime.today()
    year = today.year - age
    month = random.randint(1, 12)
    if month == 2:
        days = 29 if year % 4 == 0 else 28
    elif month in [4, 6, 9, 11]:
        days = 30
    else:
        days = 31
    day = random.randint(1, days)
    return f"{day:02d}.{month:02d}.{year}"

def extended_bio_blocks(name, surname):
    city = random_city()
    hobby = random_hobby()
    childhood = (
        f"{name} {surname} —Ä–æ–¥–∏–ª—Å—è –≤ –≥–æ—Ä–æ–¥–µ {city} –≤ –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–µ. "
        f"–° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –ø—Ä–æ—è–≤–ª—è–ª –∂–∏–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–∫—Ä—É–∂–∞—é—â–µ–º—É –º–∏—Ä—É –∏ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏–ª –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ. "
        "–í –¥–µ—Ç—Å—Ç–≤–µ –æ–Ω —á–∞—Å—Ç–æ –∏–≥—Ä–∞–ª —Å –¥—Ä—É–∑—å—è–º–∏ –≤–æ –¥–≤–æ—Ä–µ, —Å—Ç—Ä–æ–∏–ª —à–∞–ª–∞—à–∏, –∫–∞—Ç–∞–ª—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏ —Å–æ–±–∏—Ä–∞–ª –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–∞—Ä–æ–∫ –∏ –º–æ–Ω–µ—Ç. "
        "–†–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–æ—â—Ä—è–ª–∏ –µ–≥–æ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ–∫—É–ø–∞–ª–∏ –∫–Ω–∏–≥–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã. "
        f"–í –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª–µ {name} –±—ã—Å—Ç—Ä–æ –æ—Å–≤–æ–∏–ª —á—Ç–µ–Ω–∏–µ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –∞ —É—á–∏—Ç–µ–ª—è –æ—Ç–º–µ—á–∞–ª–∏ –µ–≥–æ –∫–∞–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞."
    )
    youth = (
        f"–í –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ {name} —Å—Ç–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è {hobby.split(',')[0].lower()} –∏ –ø–æ—Å–µ—â–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∏ –∫—Ä—É–∂–∫–∏. "
        "–û–Ω –ø—Ä–∏–Ω–∏–º–∞–ª —É—á–∞—Å—Ç–∏–µ –≤ —à–∫–æ–ª—å–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö, —á–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞—è –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞. "
        "–£ –Ω–µ–≥–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è –∫—Ä—É–≥ –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω–∏ —É—Å—Ç—Ä–∞–∏–≤–∞–ª–∏ –ø–æ—Ö–æ–¥—ã, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å–∏–¥–µ–ª–∫–∏ —É –∫–æ—Å—Ç—Ä–∞. "
        f"–í —ç—Ç–æ –≤—Ä–µ–º—è {name} –Ω–∞—á–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫—É—Ä—Å—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∞–∂–µ —Å–æ–±—Ä–∞–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä. "
        "–£—á–∏—Ç–µ–ª—è –∏ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ —É–≤–∞–∂–∞–ª–∏ –µ–≥–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —É–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ."
    )
    adult = (
        f"–û–∫–æ–Ω—á–∏–≤ —à–∫–æ–ª—É —Å –æ—Ç–ª–∏—á–∏–µ–º, {name} –ø–æ—Å—Ç—É–ø–∏–ª –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –≤—ã–±—Ä–∞–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –¥—É—à–µ. "
        "–í–æ –≤—Ä–µ–º—è —É—á—ë–±—ã –æ–Ω –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö, –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö –∏ —Å—Ç—É–¥—Å–æ–≤–µ—Ç–µ. "
        "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ {name} –ø–æ–¥—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –µ–º—É –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∏ –æ–±–∑–∞–≤–µ—Å—Ç–∏—Å—å –Ω—É–∂–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏. "
        "–í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –æ–Ω –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –Ω–∞—É—á–Ω—É—é —Ä–∞–±–æ—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –Ω–∞ –≤—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ. "
        "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞ {name} —É—Å—Ç—Ä–æ–∏–ª—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É, –≥–¥–µ –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª —Å–µ–±—è –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫."
    )
    present = (
        f"–°–µ–π—á–∞—Å {name} {surname} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏. "
        "–û–Ω –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º, –ø–æ—Å–µ—â–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏, —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏. "
        "–í —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è {name} –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —è–∑—ã–∫–∏ –∏ –∫—É–ª—å—Ç—É—Ä—ã, –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º. "
        "–î—Ä—É–∑—å—è –∏ –±–ª–∏–∑–∫–∏–µ —Ü–µ–Ω—è—Ç –µ–≥–æ –∑–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å, –¥–æ–±—Ä–æ—Ç—É –∏ —É–º–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É. "
        f"–í –ø–ª–∞–Ω–∞—Ö —É {name} –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö –∏–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–µ."
    )
    return childhood, youth, adult, present

def extended_purple_blocks(nickname):
    city = random_city()
    hobby = random_hobby()
    childhood = (
        f"{nickname} —Ä–æ–¥–∏–ª—Å—è –≤ –≥–æ—Ä–æ–¥–µ {city}, –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å–µ–º—å–µ. "
        "–° —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –æ—Ç–ª–∏—á–∞–ª—Å—è –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: –æ–Ω —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏, "
        "—Å—Ç—Ä–æ–∏–ª —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏ –ª—é–±–∏–ª —Å–ª—É—à–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑—ã —Å—Ç–∞—Ä—à–∏—Ö –æ –∂–∏–∑–Ω–∏ –≤ –ø—Ä–æ—à–ª–æ–º. "
        f"–í –¥–µ—Ç—Å—Ç–≤–µ {nickname} –Ω–∞—É—á–∏–ª—Å—è –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, –ø–ª–∞–≤–∞—Ç—å –∏ –¥–∞–∂–µ –æ—Å–≤–æ–∏–ª –∞–∑—ã {hobby.split(',')[0].lower()}. "
        "–®–∫–æ–ª—å–Ω—ã–µ —É—á–∏—Ç–µ–ª—è –æ—Ç–º–µ—á–∞–ª–∏ –µ–≥–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –¥–æ–±—Ä–æ–≥–æ –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–ª –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º."
    )
    youth = (
        f"–í –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ {nickname} –Ω–∞—á–∞–ª –ø—Ä–æ—è–≤–ª—è—Ç—å –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, —Å—Ç–∞–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —à–∫–æ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. "
        f"–û–Ω –≤—Å–µ—Ä—å—ë–∑ –∑–∞–Ω—è–ª—Å—è {hobby.split(',')[0].lower()}, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –∏ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö. "
        f"–° –¥—Ä—É–∑—å—è–º–∏ {nickname} —á–∞—Å—Ç–æ –µ–∑–¥–∏–ª –≤ –ª–µ—Ç–Ω–∏–µ –ª–∞–≥–µ—Ä—è, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ –¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–µ —É—Å–ø–µ—Ö–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. "
        "–£—á–∏—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ —Ü–µ–Ω–∏–ª–∏ –µ–≥–æ –∑–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —É–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö."
    )
    adult = (
        f"–ü–æ—Å–ª–µ —à–∫–æ–ª—ã {nickname} –ø–æ—Å—Ç—É–ø–∏–ª –≤ –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –≤—É–∑–æ–≤ —Å—Ç—Ä–∞–Ω—ã, –≥–¥–µ –±—ã—Å—Ç—Ä–æ –≤–ª–∏–ª—Å—è –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é –∂–∏–∑–Ω—å. "
        "–û–Ω —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—É—á–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π, –∑–∞–Ω–∏–º–∞–ª—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –Ω–µ—Ä–µ–¥–∫–æ –ø–æ–º–æ–≥–∞–ª –º–ª–∞–¥—à–∏–º –∫—É—Ä—Å–∞–º –æ—Å–≤–∞–∏–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. "
        f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ {nickname} –ø–æ–¥—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å—Ç–∞—Ä—Ç–∞–ø–∞—Ö –∏ —Ä–∞—Å—à–∏—Ä—è–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤. "
        "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç –ø–æ–∑–≤–æ–ª–∏–ª–∏ –µ–º—É —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏—Ç—å –¥–∏–ø–ª–æ–º –∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."
    )
    present = (
        f"–°–µ–≥–æ–¥–Ω—è {nickname} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º, –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º –∏ –æ—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏. "
        "–û–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö, –¥–µ–ª–∏—Ç—Å—è –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. "
        f"–í —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è {nickname} —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º, –ª—é–±–∏—Ç —á–∏—Ç–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ –∏–∑—É—á–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏. "
        "–ë–ª–∏–∑–∫–∏–µ —Ü–µ–Ω—è—Ç –µ–≥–æ –∑–∞ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
    )
    return childhood, youth, adult, present

def universal_generate_bio(data, server):
    name = data.get("name", "")
    surname = data.get("surname", "")
    childhood, youth, adult, present = extended_bio_blocks(name, surname)
    return (
        f"–ò–º—è: {name}\n"
        f"–§–∞–º–∏–ª–∏—è: {surname}\n"
        f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data['nationality']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"{random_appearance()}\n"
        f"–£–≤–ª–µ—á–µ–Ω–∏–µ: {random_hobby()}\n\n"
        f"–î–µ—Ç—Å—Ç–≤–æ:\n{childhood}\n\n"
        f"–Æ–Ω–æ—Å—Ç—å:\n{youth}\n\n"
        f"–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:\n{adult}\n\n"
        f"–ù–∞—à–µ –≤—Ä–µ–º—è:\n{present}"
    )

def purple_generate_bio(data):
    nickname = data.get("nickname", "Nick Name")
    nationality = data.get("nationality", "–†—É—Å—Å–∫–∏–π")
    age = int(data.get("age", 18))
    gender = data.get("gender", "–ú—É–∂—Å–∫–æ–π")
    city = random_city()
    birthdate = random_date_of_birth(age)
    marital = random_marital()
    education = random_education()
    height = random.randint(165, 200)
    weight = random.randint(55, 110)
    eyes = random.choice(["–ö–∞—Ä–∏–µ", "–ì–æ–ª—É–±—ã–µ", "–°–µ—Ä—ã–µ", "–ó–µ–ª–µ–Ω—ã–µ", "–ß–µ—Ä–Ω—ã–µ"])
    hair = random.choice(["–†—É—Å—ã–µ", "–ö–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "–¢–µ–º–Ω—ã–µ", "–°–≤–µ—Ç–ª–æ-—Ä—É—Å—ã–µ", "–ß–µ—Ä–Ω—ã–µ", "–¢–µ–º–Ω–æ-—Ä—É—Å—ã–µ", "–ë–ª–æ–Ω–¥"])
    bodytype = random.choice(["–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–ö—Ä–µ–ø–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–•—É–¥–æ—â–∞–≤–æ–µ", "–ü–ª–æ—Ç–Ω–æ–µ"])
    hobby = random_hobby()
    childhood, youth, adult, present = extended_purple_blocks(nickname)
    return (
        f"–ù–∏–∫–Ω–µ–π–º: {nickname}\n"
        f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        f"–î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}, –≥. {city}\n"
        f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {marital}\n"
        f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–†–æ—Å—Ç: {height} —Å–º\n"
        f"–í–µ—Å: {weight} –∫–≥\n"
        f"–¶–≤–µ—Ç –≥–ª–∞–∑: {eyes}\n"
        f"–í–æ–ª–æ—Å—ã: {hair}\n"
        f"–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {bodytype}\n"
        f"–£–≤–ª–µ—á–µ–Ω–∏–µ: {hobby}\n\n"
        f"–î–µ—Ç—Å—Ç–≤–æ:\n{childhood}\n\n"
        f"–Æ–Ω–æ—Å—Ç—å:\n{youth}\n\n"
        f"–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:\n{adult}\n\n"
        f"–ù–∞—à–µ –≤—Ä–µ–º—è:\n{present}"
    )

# --- FSM & HANDLERS ---

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –†–ü-–ë–∏–æ–≥—Ä–∞—Ñ–∏–π!</b>\n\n"
        "–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ—ë —Ä–æ–ª–µ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.\n\n"
        "‚ÑπÔ∏è <i>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ –Ω–∏–∂–µ.</i>",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def menu_handler(message: types.Message, state: FSMContext):
    if message.text == "üåü –°–æ–∑–¥–∞—Ç—å –†–ü-–ë–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏:</b>",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üì© –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º":
        await message.answer(
            "<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:</b>\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!",
            reply_markup=contact_kb,
            parse_mode="HTML"
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu_kb)

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    cdata = callback.data
    await callback.answer()
    if cdata == "server_purple":
        await state.clear()
        await state.set_state(PurpleBioStates.waiting_nickname)
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (—Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç '–ò–º—è –§–∞–º–∏–ª–∏—è', –Ω–∞–ø—Ä–∏–º–µ—Ä Sander Kligan):",
            reply_markup=exit_kb
        )
        return
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    for idx, cb in enumerate(server_callbacks):
        if cdata == cb and cb != "server_purple":
            await state.clear()
            await state.set_state(UniversalBioStates.waiting_name)
            await state.update_data(server=server_names[idx])
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=exit_kb)
            return

# --- UNIVERSAL FSM ---

@dp.message(UniversalBioStates.waiting_name)
async def universal_name(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    await state.update_data(name=message.text.strip().capitalize())
    await state.set_state(UniversalBioStates.waiting_surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=exit_kb)

@dp.message(UniversalBioStates.waiting_surname)
async def universal_surname(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    await state.update_data(surname=message.text.strip().capitalize())
    await state.set_state(UniversalBioStates.waiting_nationality)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=exit_kb)

@dp.message(UniversalBioStates.waiting_nationality)
async def universal_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    await state.update_data(nationality=message.text.strip().capitalize())
    await state.set_state(UniversalBioStates.waiting_age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 16 –¥–æ 65):", reply_markup=exit_kb)

@dp.message(UniversalBioStates.waiting_age)
async def universal_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 16 or age > 65:
            raise ValueError
    except:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 65.", reply_markup=exit_kb)
        return
    await state.update_data(age=age)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(UniversalBioStates.waiting_gender)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=kb)

@dp.message(UniversalBioStates.waiting_gender)
async def universal_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=exit_kb)
        return
    await state.update_data(gender=gender.capitalize())
    data = await state.get_data()
    bio = universal_generate_bio(data, data.get("server", ""))
    await message.answer(
        f"<b>–í–∞—à–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {data.get('server', '').upper()}:</b>\n\n" + bio,
        reply_markup=main_menu_kb, parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

# --- PURPLE FSM ---

@dp.message(PurpleBioStates.waiting_nickname)
async def purple_nickname(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nickname = message.text.strip()
    if "_" in nickname or len(nickname.split()) != 2:
        await message.answer(
            "‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è –§–∞–º–∏–ª–∏—è' —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –±–µ–∑ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π. –ü—Ä–∏–º–µ—Ä: Sander Kligan",
            reply_markup=exit_kb
        )
        return
    await state.update_data(nickname=nickname)
    await state.set_state(PurpleBioStates.waiting_nationality)
    await message.answer("2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=exit_kb)

@dp.message(PurpleBioStates.waiting_nationality)
async def purple_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    await state.update_data(nationality=message.text.strip().capitalize())
    await state.set_state(PurpleBioStates.waiting_age)
    await message.answer("3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 16 –¥–æ 65):", reply_markup=exit_kb)

@dp.message(PurpleBioStates.waiting_age)
async def purple_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 16 or age > 65:
            raise ValueError
    except:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 65.", reply_markup=exit_kb)
        return
    await state.update_data(age=age)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(PurpleBioStates.waiting_gender)
    await message.answer("4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=kb)

@dp.message(PurpleBioStates.waiting_gender)
async def purple_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=exit_kb)
        return
    await state.update_data(gender=gender.capitalize())
    data = await state.get_data()
    bio = purple_generate_bio(data)
    await message.answer("<b>–í–∞—à–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ PURPLE:</b>\n\n" + bio, reply_markup=main_menu_kb, parse_mode="HTML")
    await state.set_state(MenuStates.waiting_main_menu)

# --- –ó–ê–ü–£–°–ö ---

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
