import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="RED", callback_data="server_red")],
        [InlineKeyboardButton(text="GREEN", callback_data="server_green")]
    ]
)

class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class GreenBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

# --- –ù–ê–ë–û–†–´ –î–ê–ù–ù–´–• BLACK RUSSIA ---
CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫", "–Æ–∂–Ω—ã–π", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ"
]
PGT = [
    "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–ö–æ—Ä—è–∫–∏–Ω–æ", "–ì–æ—Ä–∫–∏"
]
VILLAGES = [
    "–ì–∞—Ä–µ–ª—å"
]
SPECIAL = [
    "–†—É–±–ª–µ–≤–∫–∞"
]
ALL_LOCATIONS = CITIES + PGT + VILLAGES + SPECIAL

JOBS = [
    "–ò–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä", "–†—ã–±–æ–ª–æ–≤", "–í–æ–¥–æ–ª–∞–∑", "–ú–µ—Ö–∞–Ω–∏–∫", "–ö–ª–∞–¥–æ–∏—Å–∫–∞—Ç–µ–ª—å",
    "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —Ñ–µ—Ä–º–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –∑–∞–≤–æ–¥–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —à–∞—Ö—Ç–µ",
    "–ú–ß–°", "–¢–∞–∫—Å–∏—Å—Ç", "–ì–∞–∑–æ–≤–∞—è —Å–ª—É–∂–±–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞"
]
ORGANIZATIONS = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–æ–ª—å–Ω–∏—Ü–∞", "–ì–ò–ë–î–î", "–£–ú–í–î", "–°–ú–ò", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "–§–°–ò–ù", "–§–°–ë", "–í–æ–∏–Ω—Å–∫–∞—è –ß–∞—Å—Ç—å"
]

MALE_NAMES = [
    "–ê–ª–µ–∫—Å–µ–π", "–ú–∞–∫—Å–∏–º", "–í–∏–∫—Ç–æ—Ä", "–°–µ—Ä–≥–µ–π", "–ò–≥–æ—Ä—å", "–í–ª–∞–¥–∏–º–∏—Ä", "–ï–≤–≥–µ–Ω–∏–π", "–î–º–∏—Ç—Ä–∏–π", "–û–ª–µ–≥", "–ì–µ–æ—Ä–≥–∏–π"
]
FEMALE_NAMES = [
    "–ú–∞—Ä–∏–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ò—Ä–∏–Ω–∞", "–ê–Ω–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", "–û–ª—å–≥–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "–ï–ª–µ–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ì–∞–ª–∏–Ω–∞"
]

EYE_COLORS = [
    "–∫–∞—Ä–∏–µ", "–≥–æ–ª—É–±—ã–µ", "—Å–µ—Ä—ã–µ", "–∑–µ–ª–µ–Ω—ã–µ", "—á–µ—Ä–Ω—ã–µ", "—è–Ω—Ç–∞—Ä–Ω—ã–µ"
]
HAIR_COLORS = [
    "—Ç–µ–º–Ω—ã–µ", "—Å–≤–µ—Ç–ª—ã–µ", "—Ä—É—Å—ã–µ", "–∫–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "—á–µ—Ä–Ω—ã–µ", "—Å–µ–¥—ã–µ"
]
BAD_HABITS = [
    "–Ω–µ—Ç", "–∫—É—Ä–µ–Ω–∏–µ", "–∞–ª–∫–æ–≥–æ–ª—å", "–∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã", "—Å–∫–≤–µ—Ä–Ω–æ—Å–ª–æ–≤–∏–µ", "–æ–ø–æ–∑–¥–∞–Ω–∏—è"
]
FAMILY_STATUSES = [
    "–•–æ–ª–æ—Å—Ç", "–ñ–µ–Ω–∞—Ç", "–ù–µ –∑–∞–º—É–∂–µ–º", "–í —Ä–∞–∑–≤–æ–¥–µ", "–í–¥–æ–≤–∞/–í–¥–æ–≤–µ—Ü"
]
CHILDREN = [
    "–Ω–µ—Ç", "–æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫", "–¥–≤–æ–µ –¥–µ—Ç–µ–π", "—Ç—Ä–æ–µ –¥–µ—Ç–µ–π"
]
PERSONALITY_TRAITS = [
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, —á–µ—Å—Ç–Ω—ã–π",
    "–î–æ–±—Ä—ã–π, –æ—Ç–∑—ã–≤—á–∏–≤—ã–π, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω—ã–π",
    "–£–ø—Ä—è–º—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π",
    "–í–µ—Å—ë–ª—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
    "–õ–∏–¥–µ—Ä, —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ, –ø—É–Ω–∫—Ç—É–∞–ª–µ–Ω",
    "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π"
]
APPEARANCES = [
    "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–ø–∫–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è",
    "–í—ã—Å–æ–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π",
    "–ù–µ–≤—ã—Å–æ–∫–∏–π, —Ö—É–¥–æ—â–∞–≤—ã–π",
    "–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞",
    "–ö—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥"
]

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_random_location():
    location_type = random.choices(
        ["–ì–æ—Ä–æ–¥", "–ü–ì–¢", "–î–µ—Ä–µ–≤–Ω—è", "–û—Å–æ–±–æ–µ –º–µ—Å—Ç–æ"], [4, 3, 1, 1]
    )[0]
    if location_type == "–ì–æ—Ä–æ–¥":
        return random.choice(CITIES)
    elif location_type == "–ü–ì–¢":
        return random.choice(PGT)
    elif location_type == "–î–µ—Ä–µ–≤–Ω—è":
        return random.choice(VILLAGES)
    else:
        return random.choice(SPECIAL)

def generate_address():
    city = get_random_location()
    streets = [
        "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è"
    ]
    street = random.choice(streets)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    if city in CITIES:
        prefix = "–≥."
    elif city in PGT:
        prefix = "–ø–≥—Ç"
    elif city in VILLAGES:
        prefix = "–¥."
    else:
        prefix = ""
    return f"{prefix} {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}", city

def get_parent_fio(fam, gender):
    if gender == "–º—É–∂—Å–∫–æ–π":
        name = random.choice(MALE_NAMES)
        return f"{name} {fam}"
    else:
        name = random.choice(FEMALE_NAMES)
        fam_f = fam
        if fam.endswith("–∏–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif fam.endswith("–æ–≤") or fam.endswith("–µ–≤") or fam.endswith("–∏–Ω"):
            fam_f = fam + "–∞"
        elif fam.endswith("—ã–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif fam.endswith("—Å–∫–∏–π"):
            fam_f = fam[:-4] + "—Å–∫–∞—è"
        elif fam.endswith("–æ–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif not fam.endswith("–∞"):
            fam_f = fam + "–∞"
        return f"{name} {fam_f}"

def generate_parents(fam):
    father = get_parent_fio(fam, "–º—É–∂—Å–∫–æ–π")
    mother = get_parent_fio(fam, "–∂–µ–Ω—Å–∫–∏–π")
    father_job = random.choice(JOBS + ORGANIZATIONS)
    mother_job = random.choice(JOBS + ORGANIZATIONS)
    return {
        "father": f"{father} ({father_job})",
        "mother": f"{mother} ({mother_job})"
    }

def generate_birthdate(age: int) -> str:
    now = datetime.now()
    year = now.year - age
    month = random.randint(1, 12)
    days_in_month = [31, 29 if year % 4 == 0 and month == 2 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = random.randint(1, days_in_month[month - 1])
    months_ru = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{day:02d} {months_ru[month - 1]} {year} –≥."

def random_height():
    return f"{random.randint(165, 200)} —Å–º"
def random_weight():
    return f"{random.randint(55, 110)} –∫–≥"

def random_children():
    return random.choice(CHILDREN)

def random_family_status():
    return random.choice(FAMILY_STATUSES)

def generate_traits():
    return random.choice(PERSONALITY_TRAITS)

def generate_life_block(stage, city):
    templates = {
        "–î–µ—Ç—Å—Ç–≤–æ": [
            f"–î–µ—Ç—Å—Ç–≤–æ –≥–µ—Ä–æ—è –ø—Ä–æ—à–ª–æ –≤ –≥–æ—Ä–æ–¥–µ {city}, –≥–¥–µ –æ–Ω —Ä–æ—Å –≤ –∑–∞–±–æ—Ç–ª–∏–≤–æ–π –∏ –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–µ. –° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏ —Å—Ç–∞—Ä–∞–ª–∏—Å—å –ø—Ä–∏–≤–∏—Ç—å –µ–º—É –ª—é–±–æ–≤—å –∫ —Ç—Ä—É–¥—É –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –æ–∫—Ä—É–∂–∞—é—â–∏–º. –ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω –ø—Ä–æ–≤–æ–¥–∏–ª –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ, –∏–≥—Ä–∞—è —Å –¥—Ä—É–∑—å—è–º–∏ –≤–æ –¥–≤–æ—Ä–µ, –∫–∞—Ç–∞—è—Å—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏ –ø–æ–º–æ–≥–∞—è —Å—Ç–∞—Ä—à–∏–º –ø–æ —Ö–æ–∑—è–π—Å—Ç–≤—É. –£—á–∏–ª—Å—è –≤ –º–µ—Å—Ç–Ω–æ–π —à–∫–æ–ª–µ, –≥–¥–µ –ø—Ä–æ—è–≤–ª—è–ª –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —à–∫–æ–ª—å–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∞–º–æ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –†–æ–¥–∏—Ç–µ–ª–∏ —á–∞—Å—Ç–æ –±—Ä–∞–ª–∏ –µ–≥–æ —Å —Å–æ–±–æ–π –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –ø–∞—Ä–∫–∞–º –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º –≥–æ—Ä–æ–¥–∞, —á—Ç–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ –≤ –Ω–µ–º –ª—é–±–æ–≤—å –∫ –ø—Ä–∏—Ä–æ–¥–µ –∏ –∂–∏–≤–æ—Ç–Ω—ã–º.",
            f"–° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –∂–∏–≤—è –≤ {city}, –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–ª–∏—á–∞–ª—Å—è –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –û–Ω –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–ª—Å—è —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å—ã –≤–∑—Ä–æ—Å–ª—ã–º –∏ –ø—Ä–æ–±–æ–≤–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ä–∞–∑–Ω—ã–º–∏ —Ö–æ–±–±–∏: –æ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è –¥–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –Ω–∞ —à–∫–æ–ª—å–Ω–æ–º –¥–≤–æ—Ä–µ. –í —Å–µ–º—å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –µ–≥–æ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, –∞ –¥–æ–º–∞ —Ü–∞—Ä–∏–ª–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —É—é—Ç–∞, –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –í –¥–µ—Ç—Å—Ç–≤–µ –µ–≥–æ –æ–∫—Ä—É–∂–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥—Ä—É–∑—å—è, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω–∏ —É—Å—Ç—Ä–∞–∏–≤–∞–ª–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ—Ö–æ–¥—ã, –∏–≥—Ä–∞–ª–∏ –≤ —Ñ—É—Ç–±–æ–ª –∏ —Å—Ç—Ä–æ–∏–ª–∏ —à–∞–ª–∞—à–∏ –≤ –ª–µ—Å—É –Ω–∞ –æ–∫—Ä–∞–∏–Ω–µ –≥–æ—Ä–æ–¥–∞.",
            f"–í {city} –¥–µ—Ç—Å—Ç–≤–æ –ø—Ä–æ—à–ª–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ –∏ —è—Ä–∫–æ. –†–æ–¥–∏—Ç–µ–ª–∏ —É–¥–µ–ª—è–ª–∏ –º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—é, –ø—Ä–∏–≤–∏–≤–∞–ª–∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—à–∏–º –∏ –ø–æ–º–æ–≥–∞–ª–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ç–∞–ª–∞–Ω—Ç—ã. –ì–µ—Ä–æ–π —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Å–µ—â–∞–ª –∫—Ä—É–∂–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞–ª —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö. –û—Å–æ–±–æ–µ –º–µ—Å—Ç–æ –≤ –µ–≥–æ –∂–∏–∑–Ω–∏ –∑–∞–Ω–∏–º–∞–ª–∏ —Å–µ–º–µ–π–Ω—ã–µ –≤–µ—á–µ—Ä–∞, –∫–æ–≥–¥–∞ –∑–∞ —Å—Ç–æ–ª–æ–º —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –≤—Å–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, –¥–µ–ª–∏–ª–∏—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Å—Ç—Ä–æ–∏–ª–∏ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ."
        ],
        "–Æ–Ω–æ—Å—Ç—å": [
            f"–Æ–Ω–æ—Å—Ç—å –±—ã–ª–∞ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–∏—Å–∫–∞ —Å–µ–±—è –∏ –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π. –í —à–∫–æ–ª–µ –≥–µ—Ä–æ–π –ø—Ä–æ—è–≤–ª—è–ª –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞–±–æ—Ç–µ —à–∫–æ–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç—è–∑–∞–Ω–∏—è. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –æ–Ω –Ω–∞—á–∞–ª —Å–µ—Ä—å–µ–∑–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º, –¥–æ–±–∏–ª—Å—è —É—Å–ø–µ—Ö–æ–≤ –Ω–∞ —Ä–∞–π–æ–Ω–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –ø—Ä–∏–æ–±—Ä—ë–ª –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π. –Æ–Ω–æ—Å—Ç—å –≤ {city} –±—ã–ª–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —è—Ä–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏: –ø–µ—Ä–≤—ã–µ –≤–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–±–µ–¥—ã –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –≤–µ—á–µ—Ä–∞–º, –º–µ—á—Ç—ã –æ –±—É–¥—É—â–µ–º –∏ –∂–µ–ª–∞–Ω–∏–µ —Å–¥–µ–ª–∞—Ç—å –∂–∏–∑–Ω—å —è—Ä—á–µ.",
            f"–í —é–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, —Ä–∞—Å—à–∏—Ä—è—è –∫—Ä—É–≥ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –û–Ω —É–≤–ª–µ–∫—Å—è –º—É–∑—ã–∫–æ–π, –∏–≥—Ä–∞–ª –≤ —à–∫–æ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏ –≤—ã—Å—Ç—É–ø–∞–ª –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö. –í–∞–∂–Ω–æ–µ –º–µ—Å—Ç–æ –∑–∞–Ω–∏–º–∞–ª–∞ —É—á–µ–±–∞: –æ–Ω —Å—Ç—Ä–µ–º–∏–ª—Å—è –∫ –≤—ã—Å–æ–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, —á—Ç–æ–±—ã –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π –∫–æ–ª–ª–µ–¥–∂. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω–∏–º–∞–ª—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ–º, –ø–æ–º–æ–≥–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∂–∏–∑–Ω–∏ –≥–æ—Ä–æ–¥–∞ {city}.",
            f"–≠—Ç–æ—Ç —ç—Ç–∞–ø –∂–∏–∑–Ω–∏ –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω –Ω–æ–≤—ã–º–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º–∏ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏. –ì–µ—Ä–æ–π –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Å—Ç–∞–ª –±–æ–ª–µ–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º. –Æ–Ω–æ—Å—Ç—å —Å—Ç–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–µ–º –ø–µ—Ä–≤—ã—Ö —Å–µ—Ä—å—ë–∑–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–ª—Å—è –ø—É—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ, –∑–∞–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å –æ—Å–Ω–æ–≤—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏—Å—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏."
        ],
        "–í–∑—Ä–æ—Å–ª–µ–Ω–∏–µ": [
            f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∫–æ–ª—ã –≥–µ—Ä–æ–π –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∫–æ–ª–ª–µ–¥–∂, –≥–¥–µ –ø–æ–ª—É—á–∏–ª –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É—á—ë–±–æ–π –Ω–∞—á–∞–ª –ø–æ–¥—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –æ–ø—ã—Ç. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏: —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –±—ã—Ç–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, —Å–æ–≤–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ —É—á—ë–±—ã. –û–¥–Ω–∞–∫–æ –≤—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —É–∫—Ä–µ–ø–∏–ª–∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–∞—É—á–∏–ª–∏ —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –¥–æ–±–∏–≤–∞—Ç—å—Å—è –∏—Ö.",
            f"–°—Ç–∞–≤ –≤–∑—Ä–æ—Å–ª–µ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—à—ë–ª –ø–µ—Ä–≤—É—é —Å–µ—Ä—å—ë–∑–Ω—É—é —Ä–∞–±–æ—Ç—É, –Ω–∞—á–∞–ª —Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É –∏ –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –í —Ä–∞–±–æ—Ç–µ –ø—Ä–æ—è–≤–∏–ª —Å–µ–±—è –∫–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∑–∞ —á—Ç–æ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –∫–æ–ª–ª–µ–≥ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –ù–∞—É—á–∏–ª—Å—è —Ü–µ–Ω–∏—Ç—å –¥—Ä—É–∂–±—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏, –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–º—å–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º.",
            f"–í–∑—Ä–æ—Å–ª–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ–º: –≥–µ—Ä–æ–π —á–∏—Ç–∞–ª –º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –ø–æ—Å–µ—â–∞–ª —Ç—Ä–µ–Ω–∏–Ω–≥–∏, –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–ø–æ—Ä—Ç–æ–º. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ—è–≤–∏–ª–∞—Å—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏—Å—å –∞–º–±–∏—Ü–∏–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω."
        ],
        "–ó—Ä–µ–ª–æ—Å—Ç—å": [
            f"–í –∑—Ä–µ–ª–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –≥–µ—Ä–æ–π –¥–æ–±–∏–ª—Å—è –º–Ω–æ–≥–æ–≥–æ: –ø–æ—Å—Ç—Ä–æ–∏–ª –∫–∞—Ä—å–µ—Ä—É, –æ–±—Ä—ë–ª —É–≤–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –∫–æ–ª–ª–µ–≥. –û–Ω –Ω–∞—É—á–∏–ª—Å—è –±—ã—Ç—å –º—É–¥—Ä—ã–º –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–º, –ø–æ–º–æ–≥–∞—Ç—å –º–æ–ª–æ–¥—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã. –ó—Ä–µ–ª–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å–ª–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–≤–Ω–∏–µ –º–µ—á—Ç—ã.",
            f"–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –∂–∏–∑–Ω–∏ –≥–µ—Ä–æ–π –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏ –≥–æ—Ä–æ–¥–∞ {city}. –ë—ã–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∑–∞–Ω–∏–º–∞–ª—Å—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã. –ó—Ä–µ–ª–æ—Å—Ç—å —Å—Ç–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–µ–º –≥–∞—Ä–º–æ–Ω–∏–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏, —Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —É—é—Ç–Ω—ã–π –¥–æ–º.",
            f"–°—Ç–∞–≤ –∑—Ä–µ–ª—ã–º, –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—à—ë–ª –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é. –û–Ω —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–æ–≤–æ–¥–∏–ª –≤—Ä–µ–º—è —Å —Å–µ–º—å—ë–π, –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª, –∑–∞–Ω–∏–º–∞–ª—Å—è –ª—é–±–∏–º—ã–º–∏ —Ö–æ–±–±–∏. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–∞—É—á–∏–ª—Å—è —Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞–¥–æ—Å—Ç–∏, —É–¥–µ–ª—è—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –±—É–¥—É—â–µ–º –¥–µ—Ç–µ–π."
        ],
        "–ù–∞—à–∏ –¥–Ω–∏": [
            f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≥–µ—Ä–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º, –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—Å–ø–µ—Ö–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏. –û–Ω –Ω–µ –∑–∞–±—ã–≤–∞–µ—Ç –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –æ–±—â–µ—Å—Ç–≤–∞, –ø–æ–º–æ–≥–∞–µ—Ç –Ω—É–∂–¥–∞—é—â–∏–º—Å—è, —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–ª–æ–¥–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ. –£–≤–µ—Ä–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –≤ –±—É–¥—É—â–µ–µ, —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º –∏ –≤–µ—Ä–∏—Ç, —á—Ç–æ –≤–ø–µ—Ä–µ–¥–∏ –µ–≥–æ –∂–¥—ë—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
            f"–°–µ–≥–æ–¥–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂ –∂–∏–≤—ë—Ç –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–π –∂–∏–∑–Ω—å—é, —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã. –°—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —ç—Ç–æ —á–µ—Å—Ç–Ω–æ—Å—Ç—å, —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º. –ù–µ –±–æ–∏—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω, –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º.",
            f"–í –Ω–∞—à–∏ –¥–Ω–∏ –≥–µ—Ä–æ–π –æ–∫—Ä—É–∂—ë–Ω –ª—é–±—è—â–∏–º–∏ –ª—é–¥—å–º–∏, –¥–æ—Ä–æ–∂–∏—Ç —Å–µ–º–µ–π–Ω—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—ë–ø–ª—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏. –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è, —á—Ç–µ–Ω–∏—è –∏ —Å–ø–æ—Ä—Ç–∞, —Å—Ç—Ä–µ–º–∏—Ç—Å—è –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –æ–±—â–µ—Å—Ç–≤—É –∏ –¥–µ–ª–∞–µ—Ç –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–ª—è –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è —Ä–æ–¥–Ω—ã—Ö."
        ]
    }
    return random.choice(templates.get(stage, [""]))

def generate_bio_red(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    birthdate = generate_birthdate(age)
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    appearance = random.choice(APPEARANCES)
    traits = generate_traits()
    parents = generate_parents(fam)
    residence, birthplace = generate_address()
    result = (
        "<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"1. –ò–º—è, —Ñ–∞–º–∏–ª–∏—è: {fio}\n"
        f"2. –ü–æ–ª: {gender}\n"
        f"3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"4. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
        f"5. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
        f"6. –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {residence}\n"
        f"7. –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –ª–∏—á–Ω—ã–µ —á–µ—Ä—Ç—ã: {traits}\n"
        f"8. –û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏: {appearance}\n"
        f"9. –†–æ–¥–∏—Ç–µ–ª–∏:\n"
        f"   - –û—Ç–µ—Ü: {parents['father']}\n"
        f"   - –ú–∞—Ç—å: {parents['mother']}\n"
    )
    return result

def generate_bio_green(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    parents = generate_parents(fam)
    residence, birthplace = generate_address()
    family_status = random_family_status()
    children = random_children()
    height = random_height()
    weight = random_weight()
    eyes = random.choice(EYE_COLORS)
    hair = random.choice(HAIR_COLORS)
    bad_habit = random.choice(BAD_HABITS)
    traits = generate_traits()
    appearance = random.choice(APPEARANCES)
    childhood = generate_life_block("–î–µ—Ç—Å—Ç–≤–æ", birthplace)
    youth = generate_life_block("–Æ–Ω–æ—Å—Ç—å", birthplace)
    adulthood = generate_life_block("–í–∑—Ä–æ—Å–ª–µ–Ω–∏–µ", birthplace)
    maturity = generate_life_block("–ó—Ä–µ–ª–æ—Å—Ç—å", birthplace)
    present = generate_life_block("–ù–∞—à–∏ –¥–Ω–∏", birthplace)
    result = (
        f"<b>–ò–º—è:</b> {fio.split()[0] if len(fio.split()) > 1 else fio}\n"
        f"<b>–§–∞–º–∏–ª–∏—è:</b> {fam}\n"
        f"<b>–†–æ–¥–∏—Ç–µ–ª–∏:</b>\n"
        f"   - –û—Ç–µ—Ü: {parents['father']}\n"
        f"   - –ú–∞—Ç—å: {parents['mother']}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthplace}\n"
        f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {residence}\n"
        f"<b>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {family_status}\n"
        f"<b>–î–µ—Ç–∏:</b> {children}\n"
        f"<b>–ü–æ–ª:</b> {gender}\n"
        f"<b>–†–æ—Å—Ç:</b> {height}\n"
        f"<b>–í–µ—Å:</b> {weight}\n"
        f"<b>–¶–≤–µ—Ç –≥–ª–∞–∑:</b> {eyes}\n"
        f"<b>–í–æ–ª–æ—Å—ã:</b> {hair}\n"
        f"<b>–ü–ª–æ—Ö–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:</b> {bad_habit}\n"
        f"<b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {traits}\n"
        f"<b>–õ–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ:</b> <i>–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ...</i>\n\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b> {childhood}\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å:</b> {youth}\n"
        f"<b>–í–∑—Ä–æ—Å–ª–µ–Ω–∏–µ:</b> {adulthood}\n"
        f"<b>–ó—Ä–µ–ª–æ—Å—Ç—å:</b> {maturity}\n"
        f"<b>–ù–∞—à–∏ –¥–Ω–∏:</b> {present}"
    )
    return result

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π Black Russia.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        text = (
            "üåü <b>–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞</b> üåü\n\n"
            "üì¨ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?\n"
            "–ü–∏—à–∏ –º–Ω–µ –≤ Telegram! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –Ω–µ –∫—É—Å–∞—é—Å—å üòâ\n\n"
            "üëâ <a href='https://t.me/bunkoc'>@bunkoc</a> üëà\n\n"
            "<i>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</i>\n"
            "P.S. –ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –±—ã—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É!"
        )
        await message.answer(text, reply_markup=main_menu_kb, parse_mode="HTML")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_green":
        await state.clear()
        await state.set_state(GreenBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    await callback.answer()

# --- RED ---
@dp.message(RedBioStates.waiting_name)
async def redbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(RedBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(RedBioStates.waiting_gender)
async def redbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(RedBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(RedBioStates.waiting_age)
async def redbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(RedBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(RedBioStates.waiting_nationality)
async def redbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_red(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ RED:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

# --- GREEN ---
@dp.message(GreenBioStates.waiting_name)
async def greenbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(GreenBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_gender)
async def greenbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(GreenBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(GreenBioStates.waiting_age)
async def greenbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(GreenBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_nationality)
async def greenbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_green(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ GREEN:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
