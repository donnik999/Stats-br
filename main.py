import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="RED", callback_data="server_red")]
    ]
)

class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

# –ù–ê–°–ï–õ–ï–ù–ù–´–ï –ü–£–ù–ö–¢–´ BLACK RUSSIA
CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫", "–Æ–∂–Ω—ã–π", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ"
]
PGT = [
    "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–ö–æ—Ä—è–∫–∏–Ω–æ", "–ì–æ—Ä–∫–∏"
]
VILLAGES = [
    "–ì–∞—Ä–µ–ª—å"
]
SPECIAL = [
    "–†—É–±–ª–µ–≤–∫–∞"
]
ALL_LOCATIONS = CITIES + PGT + VILLAGES + SPECIAL

# –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò/–†–ê–ë–û–¢–´ BLACK RUSSIA
JOBS = [
    "–ò–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä", "–†—ã–±–æ–ª–æ–≤", "–í–æ–¥–æ–ª–∞–∑", "–ú–µ—Ö–∞–Ω–∏–∫", "–ö–ª–∞–¥–æ–∏—Å–∫–∞—Ç–µ–ª—å",
    "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —Ñ–µ—Ä–º–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –∑–∞–≤–æ–¥–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —à–∞—Ö—Ç–µ",
    "–ú–ß–°", "–¢–∞–∫—Å–∏—Å—Ç", "–ì–∞–∑–æ–≤–∞—è —Å–ª—É–∂–±–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞"
]
ORGANIZATIONS = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–æ–ª—å–Ω–∏—Ü–∞", "–ì–ò–ë–î–î", "–£–ú–í–î", "–°–ú–ò", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "–§–°–ò–ù", "–§–°–ë", "–í–æ–∏–Ω—Å–∫–∞—è –ß–∞—Å—Ç—å"
]

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
MALE_NAMES = [
    "–ê–ª–µ–∫—Å–µ–π", "–ú–∞–∫—Å–∏–º", "–í–∏–∫—Ç–æ—Ä", "–°–µ—Ä–≥–µ–π", "–ò–≥–æ—Ä—å", "–í–ª–∞–¥–∏–º–∏—Ä", "–ï–≤–≥–µ–Ω–∏–π", "–î–º–∏—Ç—Ä–∏–π", "–û–ª–µ–≥", "–ì–µ–æ—Ä–≥–∏–π"
]
FEMALE_NAMES = [
    "–ú–∞—Ä–∏–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ò—Ä–∏–Ω–∞", "–ê–Ω–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", "–û–ª—å–≥–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "–ï–ª–µ–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ì–∞–ª–∏–Ω–∞"
]

# –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞/–ª–∏—á–Ω—ã–µ —á–µ—Ä—Ç—ã
PERSONALITY_TRAITS = [
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π",
    "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    "–£–º–µ–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è",
    "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π, —Å–ø–æ–∫–æ–µ–Ω –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
    "–ß–µ—Å—Ç–Ω—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —á–µ–ª–æ–≤–µ–∫",
    "–ò–º–µ–µ—Ç –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
    "–£–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ",
    "–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å",
    "–û–±–ª–∞–¥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞",
    "–°—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º"
]

APPEARANCES = [
    "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–ø–∫–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, —Ç—ë–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã.",
    "–í—ã—Å–æ–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã, —Å–µ—Ä—ã–µ –≥–ª–∞–∑–∞.",
    "–ù–µ–≤—ã—Å–æ–∫–∏–π, —Ö—É–¥–æ—â–∞–≤—ã–π, —Ä—É—Å—ã–µ –≤–æ–ª–æ—Å—ã, –∫–∞—Ä–∏–µ –≥–ª–∞–∑–∞.",
    "–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞.",
    "–ö—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥, —á–µ—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã."
]

def get_random_location():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —Å–∞–º –ø—É–Ω–∫—Ç
    location_type = random.choices(
        ["–ì–æ—Ä–æ–¥", "–ü–ì–¢", "–î–µ—Ä–µ–≤–Ω—è", "–û—Å–æ–±–æ–µ –º–µ—Å—Ç–æ"], [4, 3, 1, 1]
    )[0]
    if location_type == "–ì–æ—Ä–æ–¥":
        return random.choice(CITIES)
    elif location_type == "–ü–ì–¢":
        return random.choice(PGT)
    elif location_type == "–î–µ—Ä–µ–≤–Ω—è":
        return random.choice(VILLAGES)
    else:
        return random.choice(SPECIAL)

def generate_address():
    # –ü—Ä–∏–º–µ—Ä: "–≥. –ê—Ä–∑–∞–º–∞—Å, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 12, –∫–≤. 56"
    city = get_random_location()
    streets = [
        "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è"
    ]
    street = random.choice(streets)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    if city in CITIES:
        prefix = "–≥."
    elif city in PGT:
        prefix = "–ø–≥—Ç"
    elif city in VILLAGES:
        prefix = "–¥."
    else:
        prefix = ""
    return f"{prefix} {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}", city

def get_parent_fio(fam, gender):
    if gender == "–º—É–∂—Å–∫–æ–π":
        name = random.choice(MALE_NAMES)
        return f"{name} {fam}"
    else:
        name = random.choice(FEMALE_NAMES)
        # –°–∫–ª–æ–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –º–∞—Ç–µ—Ä–∏ (–Ω–∞ -–∞/–∞—è)
        fam_f = fam
        if fam.endswith("–∏–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif fam.endswith("–æ–≤") or fam.endswith("–µ–≤") or fam.endswith("–∏–Ω"):
            fam_f = fam + "–∞"
        elif fam.endswith("—ã–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif fam.endswith("—Å–∫–∏–π"):
            fam_f = fam[:-4] + "—Å–∫–∞—è"
        elif fam.endswith("–æ–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif not fam.endswith("–∞"):
            fam_f = fam + "–∞"
        return f"{name} {fam_f}"

def generate_parents(fam):
    father = get_parent_fio(fam, "–º—É–∂—Å–∫–æ–π")
    mother = get_parent_fio(fam, "–∂–µ–Ω—Å–∫–∏–π")
    father_job = random.choice(JOBS + ORGANIZATIONS)
    mother_job = random.choice(JOBS + ORGANIZATIONS)
    return {
        "father": father,
        "father_job": father_job,
        "mother": mother,
        "mother_job": mother_job
    }

def generate_birthdate(age: int) -> str:
    now = datetime.now()
    year = now.year - age
    month = random.randint(1, 12)
    days_in_month = [31, 29 if year % 4 == 0 and month == 2 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = random.randint(1, days_in_month[month - 1])
    months_ru = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{day:02d} {months_ru[month - 1]} {year} –≥."

def generate_traits():
    return ", ".join(random.sample(PERSONALITY_TRAITS, k=3))

def generate_bio(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    birthdate = generate_birthdate(age)
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    appearance = random.choice(APPEARANCES)
    traits = generate_traits()
    parents = generate_parents(fam)
    residence, birthplace = generate_address()

    # –ò—Ç–æ–≥–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É Black Russia
    result = (
        "<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"1. –ò–º—è, —Ñ–∞–º–∏–ª–∏—è: {fio}\n"
        f"2. –ü–æ–ª: {gender}\n"
        f"3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"4. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
        f"5. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
        f"6. –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {residence}\n"
        f"7. –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –ª–∏—á–Ω—ã–µ —á–µ—Ä—Ç—ã: {traits}\n"
        f"8. –û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏: {appearance}\n"
        f"9. –†–æ–¥–∏—Ç–µ–ª–∏:\n"
        f"   - –û—Ç–µ—Ü: {parents['father']} ({parents['father_job']})\n"
        f"   - –ú–∞—Ç—å: {parents['mother']} ({parents['mother_job']})\n"
    )
    return result

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π Black Russia.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        text = (
            "üåü <b>–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞</b> üåü\n\n"
            "üì¨ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?\n"
            "–ü–∏—à–∏ –º–Ω–µ –≤ Telegram! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –Ω–µ –∫—É—Å–∞—é—Å—å üòâ\n\n"
            "üëâ <a href='https://t.me/bunkoc'>@bunkoc</a> üëà\n\n"
            "<i>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</i>\n"
            "P.S. –ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –±—ã—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É!"
        )
        await message.answer(text, reply_markup=main_menu_kb, parse_mode="HTML")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    await callback.answer()

@dp.message(RedBioStates.waiting_name)
async def redbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(RedBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(RedBioStates.waiting_gender)
async def redbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(RedBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(RedBioStates.waiting_age)
async def redbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(RedBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(RedBioStates.waiting_nationality)
async def redbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ RED:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
