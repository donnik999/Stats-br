import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="RED", callback_data="server_red")],
        [InlineKeyboardButton(text="GREEN", callback_data="server_green")],
        [InlineKeyboardButton(text="BLUE", callback_data="server_blue")],
        [InlineKeyboardButton(text="YELLOW", callback_data="server_yellow")],
        [InlineKeyboardButton(text="ORANGE", callback_data="server_orange")]
    ]
)

class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class GreenBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class BlueBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class YellowBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class OrangeBioStates(StatesGroup):
    waiting_name = State()
    waiting_age = State()
    waiting_nationality = State()

CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫", "–Æ–∂–Ω—ã–π", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ"
]
PGT = [
    "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–ö–æ—Ä—è–∫–∏–Ω–æ", "–ì–æ—Ä–∫–∏"
]
VILLAGES = [
    "–ì–∞—Ä–µ–ª—å"
]
SPECIAL = [
    "–†—É–±–ª–µ–≤–∫–∞"
]
ALL_LOCATIONS = CITIES + PGT + VILLAGES + SPECIAL

MALE_PARENT_NAMES = [
    "–ò–≤–∞–Ω", "–°–µ—Ä–≥–µ–π", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–í–∏–∫—Ç–æ—Ä", "–î–µ–Ω–∏—Å", "–ú–∞–∫—Å–∏–º", "–î–º–∏—Ç—Ä–∏–π", "–ü–∞–≤–µ–ª", "–ê–Ω–¥—Ä–µ–π", "–í–ª–∞–¥–∏–º–∏—Ä",
    "–ï–≥–æ—Ä", "–ê–Ω–∞—Ç–æ–ª–∏–π", "–û–ª–µ–≥", "–ì–µ–æ—Ä–≥–∏–π", "–ì—Ä–∏–≥–æ—Ä–∏–π", "–ü–µ—Ç—Ä", "–ù–∏–∫–æ–ª–∞–π", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω", "–Ø—Ä–æ—Å–ª–∞–≤", "–ê—Ä—Ç—ë–º"
]
FEMALE_PARENT_NAMES = [
    "–ú–∞—Ä–∏—è", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ò—Ä–∏–Ω–∞", "–ê–Ω–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", "–û–ª—å–≥–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "–ï–ª–µ–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ì–∞–ª–∏–Ω–∞",
    "–°–≤–µ—Ç–ª–∞–Ω–∞", "–õ—é–±–æ–≤—å", "–í–µ—Ä–∞", "–õ—é–¥–º–∏–ª–∞", "–î–∞—Ä—å—è", "–ö—Å–µ–Ω–∏—è", "–ê–ª–∏—Å–∞", "–ü–æ–ª–∏–Ω–∞", "–í–∞—Å–∏–ª–∏—Å–∞", "–Ø–Ω–∞"
]

EYE_COLORS = [
    "–∫–∞—Ä–∏–µ", "–≥–æ–ª—É–±—ã–µ", "—Å–µ—Ä—ã–µ", "–∑–µ–ª–µ–Ω—ã–µ", "—á–µ—Ä–Ω—ã–µ", "—è–Ω—Ç–∞—Ä–Ω—ã–µ", "—Å–∏–Ω–∏–µ"
]
HAIR_COLORS = [
    "—Ç–µ–º–Ω—ã–µ", "—Å–≤–µ—Ç–ª—ã–µ", "—Ä—É—Å—ã–µ", "–∫–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "—á–µ—Ä–Ω—ã–µ", "—Å–µ–¥—ã–µ", "—Ç–µ–º–Ω–æ-—Ä—É—Å—ã–µ"
]

def get_random_location():
    location_type = random.choices(
        ["–ì–æ—Ä–æ–¥", "–ü–ì–¢", "–î–µ—Ä–µ–≤–Ω—è", "–û—Å–æ–±–æ–µ –º–µ—Å—Ç–æ"], [4, 3, 1, 1]
    )[0]
    if location_type == "–ì–æ—Ä–æ–¥":
        return random.choice(CITIES)
    elif location_type == "–ü–ì–¢":
        return random.choice(PGT)
    elif location_type == "–î–µ—Ä–µ–≤–Ω—è":
        return random.choice(VILLAGES)
    else:
        return random.choice(SPECIAL)

def generate_address():
    city = get_random_location()
    streets = [
        "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è"
    ]
    street = random.choice(streets)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    if city in CITIES:
        prefix = "–≥."
    elif city in PGT:
        prefix = "–ø–≥—Ç"
    elif city in VILLAGES:
        prefix = "–¥."
    else:
        prefix = ""
    return f"{prefix} {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}", city

def get_female_last_name(fam):
    fam = fam.strip()
    if fam.endswith("–∏–π"):
        fam_f = fam[:-2] + "–∞—è"
    elif fam.endswith("—ã–π"):
        fam_f = fam[:-2] + "–∞—è"
    elif fam.endswith("–æ–π"):
        fam_f = fam[:-2] + "–∞—è"
    elif fam.endswith("–æ–≤") or fam.endswith("–µ–≤") or fam.endswith("–∏–Ω"):
        fam_f = fam + "–∞"
    elif fam.endswith("—Å–∫–∏–π"):
        fam_f = fam[:-4] + "—Å–∫–∞—è"
    else:
        fam_f = fam
        if not fam_f.endswith("–∞"):
            fam_f += "–∞"
    return fam_f

def random_date_of_birth(age: int):
    today = datetime.today()
    year = today.year - age
    month = random.randint(1, 12)
    if month == 2:
        days = 29 if year % 4 == 0 else 28
    elif month in [4, 6, 9, 11]:
        days = 30
    else:
        days = 31
    day = random.randint(1, days)
    return f"{day:02d}.{month:02d}.{year}"

def random_height():
    return f"{random.randint(165, 200)} —Å–º"
def random_weight():
    return f"{random.randint(55, 110)} –∫–≥"

def random_appearance():
    return f"–ì–ª–∞–∑–∞ {random.choice(EYE_COLORS)}, –≤–æ–ª–æ—Å—ã {random.choice(HAIR_COLORS)}, –≤–µ—Å {random.randint(60, 90)} –∫–≥, —Ä–æ—Å—Ç {random.randint(165, 195)} —Å–º."

def random_character():
    return (
        f"{random.choice(['–°–ø–æ–∫–æ–π–Ω—ã–π', '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', '–†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π', '–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π', '–ß–µ—Å—Ç–Ω—ã–π', '–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π'])}, "
        f"{random.choice(['—Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π', '–æ—Ç–∑—ã–≤—á–∏–≤—ã–π', '–∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π', '—ç–º–ø–∞—Ç–∏—á–Ω—ã–π', '—Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π'])}, "
        f"{random.choice(['—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º', '—Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞', '—É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å', '–∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –∑–∞–º–∫–Ω—É—Ç—ã–º'])}."
    )

CHILDHOOD_BLOCKS = [
    "–ú–æ–µ –¥–µ—Ç—Å—Ç–≤–æ –ø—Ä–æ—à–ª–æ –≤ –Ω–µ–±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ, –≥–¥–µ –≤—Å–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∑–Ω–∞–ª–∏. –Ø –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–±–µ–Ω–∫–æ–º ‚Äî –∏–≥—Ä–∞–ª –≤–æ –¥–≤–æ—Ä–µ, –∫–∞—Ç–∞–ª—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, —É—Å—Ç—Ä–∞–∏–≤–∞–ª —Å –¥—Ä—É–∑—å—è–º–∏ —Å–æ—Å—Ç—è–∑–∞–Ω–∏—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å. –û—Ç–µ—Ü —á–∞—Å—Ç–æ –±—Ä–∞–ª –º–µ–Ω—è –Ω–∞ —Ä—ã–±–∞–ª–∫—É, –∞ –º–∞–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –ª—é–±—ã–µ –º–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, —Ä–∞–∑–≤–∏–≤–∞—è –º–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã. –í —Å–∞–¥–∏–∫–µ —É –º–µ–Ω—è –±—ã–ª–æ –Ω–µ–º–∞–ª–æ –¥—Ä—É–∑–µ–π, –∞ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –¥–ª—è –º–µ–Ω—è –≤—Ç–æ—Ä–æ–π –º–∞–º–æ–π. –í —à–∫–æ–ª–µ —è –±—ã–ª –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–º –º–∞–ª—å—á–∏–∫–æ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –º–Ω–æ–≥–æ —á–∏—Ç–∞–ª. –ó–∞ —à–∞–ª–æ—Å—Ç–∏ –±—ã–≤–∞–ª–æ –ø–æ–ª—É—á–∞–ª –≤—ã–≥–æ–≤–æ—Ä, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–ª—Å—è –ª—é–±–∏–º—á–∏–∫–æ–º –∫–ª–∞—Å—Å–∞.",
    "–Ø —Ä–æ–¥–∏–ª—Å—è –≤ –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–µ, –≥–¥–µ –º–µ–Ω—è –æ–∫—Ä—É–∂–∞–ª–∏ –∑–∞–±–æ—Ç–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º. –ú–æ–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–ª–∏—Å—å –¥–∞—Ç—å –º–Ω–µ –≤—Å–µ —Å–∞–º–æ–µ –ª—É—á—à–µ–µ. –° —Ä–∞–Ω–Ω–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —è –±—ã–ª –æ—á–µ–Ω—å —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º: —É—Å—Ç—Ä–∞–∏–≤–∞–ª –≤–æ –¥–≤–æ—Ä–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, –∏–≥—Ä–∞–ª –≤ —Ñ—É—Ç–±–æ–ª, –ø–æ–º–æ–≥–∞–ª —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ —Ö–æ–∑—è–π—Å—Ç–≤—É. –û—Ç–µ—Ü –Ω–∞—É—á–∏–ª –º–µ–Ω—è —Ä—ã–±–∞–ª–∫–µ, –∞ –º–∞–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –º–æ–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è. –í —à–∫–æ–ª–µ —É—á–∏–ª—Å—è —Ö–æ—Ä–æ—à–æ, –ª—é–±–∏–ª —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö, –∏–Ω–æ–≥–¥–∞ —Ö—É–ª–∏–≥–∞–Ω–∏–ª —Å –¥—Ä—É–∑—å—è–º–∏. –û—Å–æ–±–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –º–Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–ª–æ —á—Ç–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥.",
]

YOUTH_BLOCKS = [
    "–Æ–Ω–æ—Å—Ç—å –±—ã–ª–∞ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –Ø –≤—Å–µ –±–æ–ª—å—à–µ —É–≤–ª–µ–∫–∞–ª—Å—è —Å–ø–æ—Ä—Ç–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ —Ñ—É—Ç–±–æ–ª–æ–º ‚Äî –º—ã –∏–≥—Ä–∞–ª–∏ –¥–æ —Ç–µ–º–Ω–æ—Ç—ã, –∑–∞–±—ã–≤–∞—è –æ–±–æ –≤—Å–µ–º. –í —Å—Ç–∞—Ä—à–∏—Ö –∫–ª–∞—Å—Å–∞—Ö –ø–æ–ª—é–±–∏–ª —Ç–æ—á–Ω—ã–µ –Ω–∞—É–∫–∏ –∏ —Ä–µ—à–∏–ª —Å–≤—è–∑–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å —Å –∏–Ω–∂–µ–Ω–µ—Ä–∏–µ–π. –ü–æ—Å—Ç—É–ø–∏–ª –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –≥–¥–µ –º–Ω–æ–≥–æ —É—á–∏–ª—Å—è –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ü–æ—Å–ª–µ –≤—É–∑–∞ —É—Å—Ç—Ä–æ–∏–ª—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã, –Ω–∞—É—á–∏–ª—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞—á–∞–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º, –∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞–º–∏.",
    "–í 18 –ª–µ—Ç —è –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∞—Ä–º–∏—é, –≥–¥–µ –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π ‚Äî —Å–ª—É–∂–±–∞ –∑–∞–∫–∞–ª–∏–ª–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–∞—É—á–∏–ª–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è. –ü–æ—Å–ª–µ –∞—Ä–º–∏–∏ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ —Å–∏–ª–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≥–¥–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–≤–∏–≥–∞–ª—Å—è –ø–æ —Å–ª—É–∂–±–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —É–ø–æ—Ä—Å—Ç–≤—É. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–∞—à–µ–ª –ª—é–±–æ–≤—å, —Å–æ–∑–¥–∞–ª —Å–µ–º—å—é, –Ω–∞—á–∞–ª –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–µ—Ç–µ–π. –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –≤–∑—Ä–æ—Å–ª–æ–π –∂–∏–∑–Ω–∏ –ø—Ä–∏–Ω–æ—Å–∏–ª –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç, —É–∫—Ä–µ–ø–ª—è—è –≤–µ—Ä—É –≤ —Å–µ–±—è.",
]

PRESENT_BLOCKS = [
    "–°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –∑–∞–Ω–∏–º–∞—é—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é —É—á–∏—Ç—å—Å—è. –ê–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º, —É—á–∞—Å—Ç–≤—É—é –≤ –∑–∞–±–µ–≥–∞—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∑–¥–æ—Ä–æ–≤—å–µ. –õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞. –í –∫—Ä—É–≥—É –¥—Ä—É–∑–µ–π –∏ —Å–µ–º—å–∏ —á–µ—Ä–ø–∞—é –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Å–∏–ª—ã, –∞ –≤ —Ä–µ–¥–∫–∏–µ –º–∏–Ω—É—Ç—ã –æ—Ç–¥—ã—Ö–∞ —á–∏—Ç–∞—é –∏–ª–∏ –∑–∞–Ω–∏–º–∞—é—Å—å –∫—É–ª–∏–Ω–∞—Ä–∏–µ–π. –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ —Å –æ–ø—Ç–∏–º–∏–∑–º–æ–º —Å–º–æ—Ç—Ä—é –≤ –±—É–¥—É—â–µ–µ.",
    "–°–µ–≥–æ–¥–Ω—è —è —Å—á–∞—Å—Ç–ª–∏–≤—ã–π —Å–µ–º—å—è–Ω–∏–Ω, —Å—Ç—Ä–æ—é –∫–∞—Ä—å–µ—Ä—É, –≤–æ—Å–ø–∏—Ç—ã–≤–∞—é –¥–µ—Ç–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –í–µ–¥—É –∞–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å, –±–µ–≥–∞—é, –∏–∑—É—á–∞—é –Ω–æ–≤—ã–µ –Ω–∞—É–∫–∏, –æ—Ç–¥—ã—Ö–∞—é –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ. –õ—é–±–ª—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏, –∞ —Ö–æ–±–±–∏ –ø–æ–º–æ–≥–∞—é—Ç –º–Ω–µ –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç —Ä—É—Ç–∏–Ω—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –∂–∏–∑–Ω–∏.",
]

# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ –≤—ã—à–µ, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞) ===
def generate_bio_red(data):
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birthdate = random_date_of_birth(age)
    residence, birthplace = generate_address()
    appearance = random_appearance()
    character = random_character()
    childhood = random.choice(CHILDHOOD_BLOCKS)
    youth = random.choice(YOUTH_BLOCKS)
    present = random.choice(PRESENT_BLOCKS)
    return (
        f"<b>–ò–º—è –§–∞–º–∏–ª–∏—è:</b> {fio}\n"
        f"<b>–ü–æ–ª:</b> {gender}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthdate}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthplace}\n"
        f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {residence}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:</b> {appearance}\n"
        f"<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:</b> {character}\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b> {childhood}\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å –∏ –≤–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:</b> {youth}\n"
        f"<b>–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è:</b> {present}"
    )

def generate_bio_green(data):
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä ‚Äî –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    return generate_bio_red(data)

def generate_bio_blue(data):
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä ‚Äî –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    return generate_bio_red(data)

def generate_bio_yellow(data):
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    birth_and_place = f"{random_date_of_birth(age)} –≥., {get_random_location()}"
    residence, _ = generate_address()
    appearance = random_appearance()
    character = random_character()
    childhood = random.choice(CHILDHOOD_BLOCKS)
    youth_life = random.choice(YOUTH_BLOCKS)
    present = random.choice(PRESENT_BLOCKS)
    return (
        f"<b>–ò–º—è –§–∞–º–∏–ª–∏—è:</b> {fio}\n"
        f"<b>–ü–æ–ª:</b> {gender}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_and_place}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {residence}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:</b> {appearance}\n"
        f"<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:</b> {character}\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b> {childhood}\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å –∏ –≤–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:</b> {youth_life}\n"
        f"<b>–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è:</b> {present}"
    )

def generate_bio_orange(data):
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birth_and_place = f"{random_date_of_birth(age)} –≥., {get_random_location()}"
    residence, _ = generate_address()
    appearance = random_appearance()
    character = random_character()
    childhood = random.choice(CHILDHOOD_BLOCKS)
    youth_life = random.choice(YOUTH_BLOCKS)
    present = random.choice(PRESENT_BLOCKS)
    return (
        f"<b>–ò–º—è –§–∞–º–∏–ª–∏—è:</b> {fio}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_and_place}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {residence}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:</b> {appearance}\n"
        f"<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:</b> {character}\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b> {childhood}\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å –∏ –≤–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:</b> {youth_life}\n"
        f"<b>–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è:</b> {present}"
    )

# === FSM –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π Black Russia.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        text = (
            "üåü <b>–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞</b> üåü\n\n"
            "üì¨ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?\n"
            "–ü–∏—à–∏ –º–Ω–µ –≤ Telegram! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –Ω–µ –∫—É—Å–∞—é—Å—å üòâ\n\n"
            "üëâ <a href='https://t.me/bunkoc'>@bunkoc</a> üëà\n\n"
            "<i>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</i>\n"
            "P.S. –ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –±—ã—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É!"
        )
        await message.answer(text, reply_markup=main_menu_kb, parse_mode="HTML")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_green":
        await state.clear()
        await state.set_state(GreenBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_blue":
        await state.clear()
        await state.set_state(BlueBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_yellow":
        await state.clear()
        await state.set_state(YellowBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_orange":
        await state.clear()
        await state.set_state(OrangeBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    await callback.answer()

# RED
@dp.message(RedBioStates.waiting_name)
async def redbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(RedBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(RedBioStates.waiting_gender)
async def redbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(RedBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(RedBioStates.waiting_age)
async def redbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(RedBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(RedBioStates.waiting_nationality)
async def redbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_red(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ RED:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

# GREEN
@dp.message(GreenBioStates.waiting_name)
async def greenbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(GreenBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_gender)
async def greenbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(GreenBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(GreenBioStates.waiting_age)
async def greenbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(GreenBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_nationality)
async def greenbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_green(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ GREEN:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

# BLUE
@dp.message(BlueBioStates.waiting_name)
async def bluebio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(BlueBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(BlueBioStates.waiting_gender)
async def bluebio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(BlueBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 16 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(BlueBioStates.waiting_age)
async def bluebio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 16 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(BlueBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(BlueBioStates.waiting_nationality)
async def bluebio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_blue(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ BLUE:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

# YELLOW
@dp.message(YellowBioStates.waiting_name)
async def yellowbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(YellowBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(YellowBioStates.waiting_gender)
async def yellowbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(YellowBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 16 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(YellowBioStates.waiting_age)
async def yellowbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 16 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(YellowBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(YellowBioStates.waiting_nationality)
async def yellowbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_yellow(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ YELLOW:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

# ORANGE
@dp.message(OrangeBioStates.waiting_name)
async def orangebio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(OrangeBioStates.waiting_age)
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 16 –¥–æ 65):</b>", parse_mode="HTML")

@dp.message(OrangeBioStates.waiting_age)
async def orangebio_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 16 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(OrangeBioStates.waiting_nationality)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(OrangeBioStates.waiting_nationality)
async def orangebio_nationality(message: types.Message, state: FSMContext):
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_orange(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ORANGE:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
