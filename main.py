import os
import logging
import getpass
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = "8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw"
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")]],
    resize_keyboard=True,
)

class BioStates(StatesGroup):
    waiting_fio = State()
    waiting_age = State()
    waiting_nationality = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RP Biography Bot!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ <b>—Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—é</b> –¥–ª—è –º–∏—Ä–∞ <b>Black Russia</b> –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º —Å–µ—Ä–≤–µ—Ä–∞.\n"
        "–ë–æ—Ç –∑–∞–¥–∞—Å—Ç —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–±–µ—Ä—ë—Ç –∞–Ω–∫–µ—Ç—É ‚Äî –∞ –¥–∞–ª—å—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é, –≥—Ä–∞–º–æ—Ç–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    await message.answer(text, reply_markup=menu_kb, parse_mode="HTML")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã
@dp.message(lambda m: m.text == "üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")
async def start_bio(message: types.Message, state: FSMContext):
    await state.set_state(BioStates.waiting_fio)
    await message.answer(
        "<b>1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>\n"
        "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π.",
        parse_mode="HTML"
    )

# –í–≤–æ–¥ –§–ò–û
@dp.message(BioStates.waiting_fio)
async def bio_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    if "_" in fio or not all(x.isalpha() or x.isspace() for x in fio):
        await message.answer(
            "‚ö†Ô∏è <b>–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>",
            parse_mode="HTML"
        )
        return
    await state.update_data(fio=fio)
    await state.set_state(BioStates.waiting_age)
    await message.answer(
        "<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n"
        "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç <b>18</b> –¥–æ <b>65</b> –ª–µ—Ç.",
        parse_mode="HTML"
    )

# –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(BioStates.waiting_age)
async def bio_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è <b>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            parse_mode="HTML"
        )
        return
    await state.update_data(age=age)
    await state.set_state(BioStates.waiting_nationality)
    await message.answer(
        "<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–†—É—Å—Å–∫–∏–π, –¢–∞—Ç–∞—Ä–∏–Ω, –ê—Ä–º—è–Ω–∏–Ω, –ß–µ—á–µ–Ω–µ—Ü, –ò—Ç–∞–ª—å—è–Ω–µ—Ü –∏ —Ç.–ø.</i>",
        parse_mode="HTML"
    )

# –í–≤–æ–¥ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–∏–æ–≥—Ä–∞—Ñ–∏–∏!
@dp.message(BioStates.waiting_nationality)
async def bio_nationality(message: types.Message, state: FSMContext):
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    # –ó–¥–µ—Å—å –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –Ω–∏–∂–µ)
    await message.answer(
        f"‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
        f"–§–ò–û: <i>{data['fio']}</i>\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: <i>{data['age']}</i>\n"
        f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: <i>{data['nationality']}</i>\n\n"
        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞...",
        parse_mode="HTML"
    )
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
