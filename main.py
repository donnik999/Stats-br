import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="RED", callback_data="server_red")]
        # –ë—É–¥—É—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä–∞? –î–æ–±–∞–≤—å —Å—é–¥–∞ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏!
    ]
)

class ServerState(StatesGroup):
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RP Biography Bot!</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é:"
    )
    await message.answer(text, reply_markup=server_kb, parse_mode="HTML")
    await state.set_state(ServerState.choosing_server)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ RED)
@dp.callback_query(ServerState.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer(
            "<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            parse_mode="HTML"
        )
    await callback.answer()

# –î–∞–ª–µ–µ ‚Äî –±–ª–æ–∫ –∞–Ω–∫–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–®–ê–ì 2) –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!
# –ñ–¥—É: –æ–∫ –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã?

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
