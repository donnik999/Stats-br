import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hcode

# üß† –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã —Å—é–¥–∞
TELEGRAM_BOT_TOKEN = "8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw"
HUGGINGFACE_API_TOKEN = "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"
HUGGINGFACE_MODEL = "gpt2"  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å

# --- Hugging Face API ---
HF_API_URL = f"https://api-inference.huggingface.co/models/{HUGGINGFACE_MODEL}"
HEADERS = {"Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"}


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Hugging Face ü§ñ")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_text(message: Message):
    user_input = message.text
    payload = {"inputs": user_input}

    try:
        await message.chat.do("typing")
        response = requests.post(HF_API_URL, headers=HEADERS, json=payload, timeout=30)
        data = response.json()

        if isinstance(data, dict) and "error" in data:
            await message.answer(f"–û—à–∏–±–∫–∞: {hcode(data['error'])}", parse_mode=ParseMode.HTML)
        elif isinstance(data, list) and "generated_text" in data[0]:
            generated = data[0]["generated_text"]
            reply = generated[len(user_input):].strip()
            await message.answer(reply or "–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ü§î")
        else:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    logging.basicConfig(level=logging.INFO)

    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()

    dp.message.register(cmd_start, CommandStart())
    dp.message.register(handle_text, F.text & ~F.command)

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
