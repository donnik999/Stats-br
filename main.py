import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ (RED –∏ GREEN)
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="RED", callback_data="server_red"),
            InlineKeyboardButton(text="GREEN", callback_data="server_green")
        ]
    ]
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é –∏ –∞–Ω–∫–µ—Ç
class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class GreenBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_parents = State()
    waiting_age = State()
    waiting_nationality = State()
    waiting_birthplace = State()
    waiting_residence = State()
    waiting_marital = State()
    waiting_children = State()
    waiting_gender = State()
    waiting_height = State()
    waiting_weight = State()
    waiting_eyecolor = State()
    waiting_hair = State()
    waiting_badhabits = State()
    waiting_character = State()

# --- –°–ü–†–ê–í–û–ß–ù–ò–ö–ò ---
CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–Æ–∂–Ω—ã–π", "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ", "–ú–æ—Ä—Å–∫–æ–µ",
    "–ë—É—Å–∞–µ–≤–æ", "–ì–æ—Ä–∫–∏", "–ù–æ–≤—ã–π –ê—Ä–∑–∞–º–∞—Å", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫"
]
STREETS = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–õ–µ—Å–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–°–æ–ª–Ω–µ—á–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è",
    "–®–æ—Å—Å–µ–π–Ω–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ü–æ–±–µ–¥—ã", "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–ú–∏—Ä–∞",
    "–û–∑–µ—Ä–Ω–∞—è", "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è", "–¢—Ä—É–¥–æ–≤–∞—è", "–°–µ–≤–µ—Ä–Ω–∞—è"
]
APPEARANCES = [
    "–í—ã—Å–æ–∫–∏–π, —Å—Ç—Ä–æ–π–Ω—ã–π, —Ç–µ–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã, –∫–∞—Ä–∏–µ –≥–ª–∞–∑–∞, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞.",
    "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–ø–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã, –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞.",
    "–ö—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, —Ä—É—Å—ã–µ –≤–æ–ª–æ—Å—ã, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞.",
    "–ù–µ–≤—ã—Å–æ–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã, —Å–µ—Ä—ã–µ –≥–ª–∞–∑–∞.",
    "–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç, —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –¥–æ–±—Ä–æ–¥—É—à–Ω–∞—è —É–ª—ã–±–∫–∞, –∑–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞."
]
HAIR_COLORS = [
    "—Ç–µ–º–Ω—ã–µ", "—Å–≤–µ—Ç–ª—ã–µ", "—Ä—É—Å—ã–µ", "—á–µ—Ä–Ω—ã–µ", "–∫–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "—Ä—ã–∂–∏–µ"
]
EYE_COLORS = [
    "–∫–∞—Ä–∏–µ", "–≥–æ–ª—É–±—ã–µ", "–∑–µ–ª–µ–Ω—ã–µ", "—Å–µ—Ä—ã–µ", "—á–µ—Ä–Ω—ã–µ"
]
CHARACTERS = [
    "–í–µ–∂–ª–∏–≤—ã–π, —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å.",
    "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, –æ–±–ª–∞–¥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.",
    "–°–ø–æ–∫–æ–π–Ω—ã–π, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π, —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–¥—å–º–∏.",
    "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π.",
    "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –ª—é–±–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ."
]
BAD_HABITS = [
    "–Ω–µ—Ç", "—Ä–µ–¥–∫–æ –∫—É—Ä–∏—Ç", "–∏–Ω–æ–≥–¥–∞ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç", "—á–∞—Å—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç –º–µ–ª–æ—á–∏", "–ª—é–±–∏—Ç –ø–æ—Å–ø–∞—Ç—å –¥–æ–ø–æ–∑–¥–Ω–∞"
]
MARITALS = [
    "–•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º", "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º", "–í —Ä–∞–∑–≤–æ–¥–µ", "–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ"
]
CHILDREN = [
    "–ù–µ—Ç", "–û–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫", "–î–≤–æ–µ –¥–µ—Ç–µ–π", "–ú–Ω–æ–≥–æ–¥–µ—Ç–Ω–∞—è —Å–µ–º—å—è"
]
HOBBIES = [
    "—á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
    "–∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ —Ñ—É—Ç–±–æ–ª–æ–º",
    "–∏–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ –∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ–≤",
    "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
    "—Ä—ã–±–∞–ª–∫–∞ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
]
PARENT_VARIANTS = [
    "–û—Ç–µ—Ü ‚Äî –ò–≤–∞–Ω, –º–∞—Ç—å ‚Äî –ú–∞—Ä–∏—è",
    "–û—Ç–µ—Ü ‚Äî –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –º–∞—Ç—å ‚Äî –ï–ª–µ–Ω–∞",
    "–û—Ç–µ—Ü ‚Äî –°–µ—Ä–≥–µ–π, –º–∞—Ç—å ‚Äî –û–ª—å–≥–∞",
    "–û—Ç–µ—Ü ‚Äî –í–∏–∫—Ç–æ—Ä, –º–∞—Ç—å ‚Äî –°–≤–µ—Ç–ª–∞–Ω–∞",
    "–û—Ç–µ—Ü ‚Äî –ú–∏—Ö–∞–∏–ª, –º–∞—Ç—å ‚Äî –ù–∞—Ç–∞–ª—å—è"
]

# --- –§–£–ù–ö–¶–ò–ò ---
def generate_address():
    city = random.choice(CITIES)
    street = random.choice(STREETS)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    return f"–≥. {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}", city

def generate_birthdate(age: int) -> str:
    now = datetime.now()
    year = now.year - age
    month = random.randint(1, 12)
    days_in_month = [31, 29 if year % 4 == 0 and month == 2 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = random.randint(1, days_in_month[month - 1])
    months_ru = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{day:02d} {months_ru[month - 1]} {year} –≥."

def generate_green_bio(data: dict) -> str:
    name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    surname = data.get("surname", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    parents = data.get("parents", random.choice(PARENT_VARIANTS))
    age = int(data.get("age", 18))
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birthplace = data.get("birthplace", random.choice(CITIES))
    residence = data.get("residence", generate_address()[0])
    marital = data.get("marital", random.choice(MARITALS))
    children = data.get("children", random.choice(CHILDREN))
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    height = data.get("height", f"{random.randint(165, 195)} —Å–º")
    weight = data.get("weight", f"{random.randint(55, 100)} –∫–≥")
    eye = data.get("eyecolor", random.choice(EYE_COLORS))
    hair = data.get("hair", random.choice(HAIR_COLORS))
    bad = data.get("badhabits", random.choice(BAD_HABITS))
    character = data.get("character", random.choice(CHARACTERS))

    # –ë–ª–æ–∫–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (—Ä–∞–Ω–¥–æ–º–Ω—ã–µ, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
    childhood_blocks = [
        f"–î–µ—Ç—Å—Ç–≤–æ –ø—Ä–æ—à–ª–æ –≤ –≥–æ—Ä–æ–¥–µ {birthplace}, –≥–¥–µ {name} —Å —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –ø—Ä–æ—è–≤–ª—è–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∏–∑—É—á–µ–Ω–∏—é –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ –º–∏—Ä–∞.",
        "–° –¥–µ—Ç—Å—Ç–≤–∞ –æ—Ç–ª–∏—á–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –ª—é–±–∏–ª –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ —Ö–æ–∑—è–π—Å—Ç–≤—É.",
        "–†–æ–¥–∏—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–æ—â—Ä—è–ª–∏ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ.",
        "–í –¥–µ—Ç—Å—Ç–≤–µ –ø–æ—Å–µ—â–∞–ª —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫—Ä—É–∂–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏, –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–±–µ–Ω–∫–æ–º."
    ]
    youth_blocks = [
        "–í —é–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª –ø—Ä–æ—è–≤–ª—è—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–ø–æ—Ä—Ç—É.",
        "–£—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É –∏ –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∫–æ–ª–ª–µ–¥–∂.",
        "–° —é–Ω—ã—Ö –ª–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö.",
        "–í –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –Ω–∞—á–∞–ª –∑–∞–¥—É–º—ã–≤–∞—Ç—å—Å—è –æ –±—É–¥—É—â–µ–º –∏ —Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–≤—ã–µ –ø–ª–∞–Ω—ã."
    ]
    adulthood_blocks = [
        "–ü–æ—Å—Ç—É–ø–∏–ª –≤ –≤—ã—Å—à–µ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –≥–¥–µ –ø—Ä–∏–æ–±—Ä–µ–ª –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π.",
        "–í –ø–µ—Ä–∏–æ–¥ –≤–∑—Ä–æ—Å–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–±–∏—Ä–∞–ª—Å—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞.",
        "–°—Ç–∞–ª –±–æ–ª–µ–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º, —É—á–∏–ª—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        "–í–æ –≤–∑—Ä–æ—Å–ª–æ–π –∂–∏–∑–Ω–∏ –Ω–∞—á–∞–ª —Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É –∏ –∑–∞–¥—É–º—ã–≤–∞—Ç—å—Å—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏."
    ]
    maturity_blocks = [
        "–í –∑—Ä–µ–ª–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ø–µ—Ö–æ–≤, —Å—Ç–∞–ª –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.",
        "–ó—Ä–µ–ª–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å–ª–∞ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è, –ø–æ—è–≤–∏–ª–æ—Å—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º.",
        "–°—Ç–∞–ª –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º –≤ —Å–≤–æ–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –ø—Ä–∏–æ–±—Ä–µ–ª —É–≤–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–≥ –∏ –∑–Ω–∞–∫–æ–º—ã—Ö.",
        "–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –∂–∏–∑–Ω–∏ –Ω–∞—É—á–∏–ª—Å—è —Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –±–ª–∏–∑–∫–∏—Ö."
    ]
    now_blocks = [
        "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
        "–°—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ —Å–µ–º—å–µ.",
        "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤ –±—É–¥—É—â–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.",
        "–°—á–∏—Ç–∞–µ—Ç –≤–∞–∂–Ω—ã–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —á–µ—Å—Ç–Ω—ã–º, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º."
    ]

    childhood = random.choice(childhood_blocks)
    youth = random.choice(youth_blocks)
    adulthood = random.choice(adulthood_blocks)
    maturity = random.choice(maturity_blocks)
    now = random.choice(now_blocks)

    bio = (
        f"<b>–ò–º—è:</b> {name}\n"
        f"<b>–§–∞–º–∏–ª–∏—è:</b> {surname}\n"
        f"<b>–†–æ–¥–∏—Ç–µ–ª–∏:</b> {parents}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthplace}\n"
        f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {residence}\n"
        f"<b>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {marital}\n"
        f"<b>–î–µ—Ç–∏:</b> {children}\n"
        f"<b>–ü–æ–ª:</b> {gender}\n"
        f"<b>–†–æ—Å—Ç:</b> {height}\n"
        f"<b>–í–µ—Å:</b> {weight}\n"
        f"<b>–¶–≤–µ—Ç –≥–ª–∞–∑:</b> {eye}\n"
        f"<b>–í–æ–ª–æ—Å—ã:</b> {hair}\n"
        f"<b>–ü–ª–æ—Ö–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:</b> {bad}\n"
        f"<b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {character}\n"
        f"<b>–õ–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ:</b> (–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)\n\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b> {childhood}\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å:</b> {youth}\n"
        f"<b>–í–∑—Ä–æ—Å–ª–µ–Ω–∏–µ:</b> {adulthood}\n"
        f"<b>–ó—Ä–µ–ª–æ—Å—Ç—å:</b> {maturity}\n"
        f"<b>–ù–∞—à–∏ –¥–Ω–∏:</b> {now}"
    )
    return bio

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        text = (
            "üåü <b>–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞</b> üåü\n\n"
            "üì¨ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?\n"
            "–ü–∏—à–∏ –º–Ω–µ –≤ Telegram!\n\n"
            "üëâ <a href='https://t.me/bunkoc'>@bunkoc</a> üëà\n\n"
            "<i>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</i>\n"
            "P.S. –ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –±—ã—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É!"
        )
        await message.answer(text, reply_markup=main_menu_kb, parse_mode="HTML")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_green":
        await state.clear()
        await state.set_state(GreenBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")
    await callback.answer()

# ----------- GREEN –ê–ù–ö–ï–¢–ê –ü–û–®–ê–ì–û–í–û -----------
@dp.message(GreenBioStates.waiting_name)
async def greenbio_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(GreenBioStates.waiting_surname)
    await message.answer("<b>2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_surname)
async def greenbio_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await state.set_state(GreenBioStates.waiting_parents)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–∏–º–µ—Ä: –û—Ç–µ—Ü ‚Äî –ò–≤–∞–Ω, –º–∞—Ç—å ‚Äî –ú–∞—Ä–∏—è):</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_parents)
async def greenbio_parents(message: types.Message, state: FSMContext):
    await state.update_data(parents=message.text.strip())
    await state.set_state(GreenBioStates.waiting_age)
    await message.answer("<b>4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_age)
async def greenbio_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(GreenBioStates.waiting_nationality)
    await message.answer("<b>5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_nationality)
async def greenbio_nationality(message: types.Message, state: FSMContext):
    await state.update_data(nationality=message.text.strip())
    await state.set_state(GreenBioStates.waiting_birthplace)
    await message.answer("<b>6Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_birthplace)
async def greenbio_birthplace(message: types.Message, state: FSMContext):
    await state.update_data(birthplace=message.text.strip())
    await state.set_state(GreenBioStates.waiting_residence)
    await message.answer("<b>7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_residence)
async def greenbio_residence(message: types.Message, state: FSMContext):
    await state.update_data(residence=message.text.strip())
    await state.set_state(GreenBioStates.waiting_marital)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º")],
            [KeyboardButton(text="–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º")],
            [KeyboardButton(text="–í —Ä–∞–∑–≤–æ–¥–µ")],
            [KeyboardButton(text="–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>8Ô∏è‚É£ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_marital)
async def greenbio_marital(message: types.Message, state: FSMContext):
    await state.update_data(marital=message.text.strip())
    await state.set_state(GreenBioStates.waiting_children)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="–û–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫")],
            [KeyboardButton(text="–î–≤–æ–µ –¥–µ—Ç–µ–π")],
            [KeyboardButton(text="–ú–Ω–æ–≥–æ–¥–µ—Ç–Ω–∞—è —Å–µ–º—å—è")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>9Ô∏è‚É£ –î–µ—Ç–∏:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_children)
async def greenbio_children(message: types.Message, state: FSMContext):
    await state.update_data(children=message.text.strip())
    await state.set_state(GreenBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>üîü –ü–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_gender)
async def greenbio_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text.strip())
    await state.set_state(GreenBioStates.waiting_height)
    await message.answer("<b>1Ô∏è‚É£1Ô∏è‚É£ –†–æ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤ —Å–º):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(GreenBioStates.waiting_height)
async def greenbio_height(message: types.Message, state: FSMContext):
    await state.update_data(height=message.text.strip() + " —Å–º")
    await state.set_state(GreenBioStates.waiting_weight)
    await message.answer("<b>1Ô∏è‚É£2Ô∏è‚É£ –í–µ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤ –∫–≥):</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_weight)
async def greenbio_weight(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text.strip() + " –∫–≥")
    await state.set_state(GreenBioStates.waiting_eyecolor)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∞—Ä–∏–µ")],
            [KeyboardButton(text="–ì–æ–ª—É–±—ã–µ")],
            [KeyboardButton(text="–ó–µ–ª–µ–Ω—ã–µ")],
            [KeyboardButton(text="–°–µ—Ä—ã–µ")],
            [KeyboardButton(text="–ß–µ—Ä–Ω—ã–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>1Ô∏è‚É£3Ô∏è‚É£ –¶–≤–µ—Ç –≥–ª–∞–∑:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_eyecolor)
async def greenbio_eyecolor(message: types.Message, state: FSMContext):
    await state.update_data(eyecolor=message.text.strip())
    await state.set_state(GreenBioStates.waiting_hair)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–µ–º–Ω—ã–µ")],
            [KeyboardButton(text="–°–≤–µ—Ç–ª—ã–µ")],
            [KeyboardButton(text="–†—É—Å—ã–µ")],
            [KeyboardButton(text="–ß–µ—Ä–Ω—ã–µ")],
            [KeyboardButton(text="–ö–∞—à—Ç–∞–Ω–æ–≤—ã–µ")],
            [KeyboardButton(text="–†—ã–∂–∏–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>1Ô∏è‚É£4Ô∏è‚É£ –¶–≤–µ—Ç –≤–æ–ª–æ—Å:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_hair)
async def greenbio_hair(message: types.Message, state: FSMContext):
    await state.update_data(hair=message.text.strip())
    await state.set_state(GreenBioStates.waiting_badhabits)
    await message.answer("<b>1Ô∏è‚É£5Ô∏è‚É£ –ü–ª–æ—Ö–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(GreenBioStates.waiting_badhabits)
async def greenbio_badhabits(message: types.Message, state: FSMContext):
    await state.update_data(badhabits=message.text.strip())
    await state.set_state(GreenBioStates.waiting_character)
    await message.answer("<b>1Ô∏è‚É£6Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_character)
async def greenbio_character(message: types.Message, state: FSMContext):
    await state.update_data(character=message.text.strip())
    data = await state.get_data()
    bio = generate_green_bio(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ GREEN:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await message.answer("<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–í –ø—É–Ω–∫—Ç–µ <b>¬´–õ–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ¬ª</b> –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode="HTML")
    await state.set_state(MenuStates.waiting_main_menu)

# --------- RED –ê–ù–ö–ï–¢–ê ---------
@dp.message(RedBioStates.waiting_name)
async def redbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(RedBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(RedBioStates.waiting_gender)
async def redbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(RedBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(RedBioStates.waiting_age)
async def redbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(RedBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(RedBioStates.waiting_nationality)
async def redbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è RED
    bio = generate_bio(await state.get_data())
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ RED:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
