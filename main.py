import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="RED", callback_data="server_red")],
        [InlineKeyboardButton(text="GREEN", callback_data="server_green")]
    ]
)

class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

class GreenBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

# --- –ù–ê–ë–û–†–´ –î–ê–ù–ù–´–• BLACK RUSSIA ---
CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫", "–Æ–∂–Ω—ã–π", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ"
]
PGT = [
    "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–ö–æ—Ä—è–∫–∏–Ω–æ", "–ì–æ—Ä–∫–∏"
]
VILLAGES = [
    "–ì–∞—Ä–µ–ª—å"
]
SPECIAL = [
    "–†—É–±–ª–µ–≤–∫–∞"
]
ALL_LOCATIONS = CITIES + PGT + VILLAGES + SPECIAL

JOBS = [
    "–ò–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä", "–†—ã–±–æ–ª–æ–≤", "–í–æ–¥–æ–ª–∞–∑", "–ú–µ—Ö–∞–Ω–∏–∫", "–ö–ª–∞–¥–æ–∏—Å–∫–∞—Ç–µ–ª—å",
    "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —Ñ–µ—Ä–º–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ –∑–∞–≤–æ–¥–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞ —à–∞—Ö—Ç–µ",
    "–ú–ß–°", "–¢–∞–∫—Å–∏—Å—Ç", "–ì–∞–∑–æ–≤–∞—è —Å–ª—É–∂–±–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞"
]
ORGANIZATIONS = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–æ–ª—å–Ω–∏—Ü–∞", "–ì–ò–ë–î–î", "–£–ú–í–î", "–°–ú–ò", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "–§–°–ò–ù", "–§–°–ë", "–í–æ–∏–Ω—Å–∫–∞—è –ß–∞—Å—Ç—å"
]

MALE_NAMES = [
    "–ê–ª–µ–∫—Å–µ–π", "–ú–∞–∫—Å–∏–º", "–í–∏–∫—Ç–æ—Ä", "–°–µ—Ä–≥–µ–π", "–ò–≥–æ—Ä—å", "–í–ª–∞–¥–∏–º–∏—Ä", "–ï–≤–≥–µ–Ω–∏–π", "–î–º–∏—Ç—Ä–∏–π", "–û–ª–µ–≥", "–ì–µ–æ—Ä–≥–∏–π"
]
FEMALE_NAMES = [
    "–ú–∞—Ä–∏–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ò—Ä–∏–Ω–∞", "–ê–Ω–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", "–û–ª—å–≥–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "–ï–ª–µ–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ì–∞–ª–∏–Ω–∞"
]

EYE_COLORS = [
    "–∫–∞—Ä–∏–µ", "–≥–æ–ª—É–±—ã–µ", "—Å–µ—Ä—ã–µ", "–∑–µ–ª–µ–Ω—ã–µ", "—á–µ—Ä–Ω—ã–µ", "—è–Ω—Ç–∞—Ä–Ω—ã–µ"
]
HAIR_COLORS = [
    "—Ç–µ–º–Ω—ã–µ", "—Å–≤–µ—Ç–ª—ã–µ", "—Ä—É—Å—ã–µ", "–∫–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "—á–µ—Ä–Ω—ã–µ", "—Å–µ–¥—ã–µ"
]
BAD_HABITS = [
    "–Ω–µ—Ç", "–∫—É—Ä–µ–Ω–∏–µ", "–∞–ª–∫–æ–≥–æ–ª—å", "–∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã", "—Å–∫–≤–µ—Ä–Ω–æ—Å–ª–æ–≤–∏–µ", "–æ–ø–æ–∑–¥–∞–Ω–∏—è"
]
FAMILY_STATUSES = [
    "–•–æ–ª–æ—Å—Ç", "–ñ–µ–Ω–∞—Ç", "–ù–µ –∑–∞–º—É–∂–µ–º", "–í —Ä–∞–∑–≤–æ–¥–µ", "–í–¥–æ–≤–∞/–í–¥–æ–≤–µ—Ü"
]
CHILDREN = [
    "–Ω–µ—Ç", "–æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫", "–¥–≤–æ–µ –¥–µ—Ç–µ–π", "—Ç—Ä–æ–µ –¥–µ—Ç–µ–π"
]
PERSONALITY_TRAITS = [
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, —á–µ—Å—Ç–Ω—ã–π",
    "–î–æ–±—Ä—ã–π, –æ—Ç–∑—ã–≤—á–∏–≤—ã–π, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω—ã–π",
    "–£–ø—Ä—è–º—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π",
    "–í–µ—Å—ë–ª—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
    "–õ–∏–¥–µ—Ä, —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ, –ø—É–Ω–∫—Ç—É–∞–ª–µ–Ω",
    "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π"
]
APPEARANCES = [
    "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–ø–∫–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è",
    "–í—ã—Å–æ–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π",
    "–ù–µ–≤—ã—Å–æ–∫–∏–π, —Ö—É–¥–æ—â–∞–≤—ã–π",
    "–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞",
    "–ö—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥"
]

def get_random_location():
    location_type = random.choices(
        ["–ì–æ—Ä–æ–¥", "–ü–ì–¢", "–î–µ—Ä–µ–≤–Ω—è", "–û—Å–æ–±–æ–µ –º–µ—Å—Ç–æ"], [4, 3, 1, 1]
    )[0]
    if location_type == "–ì–æ—Ä–æ–¥":
        return random.choice(CITIES)
    elif location_type == "–ü–ì–¢":
        return random.choice(PGT)
    elif location_type == "–î–µ—Ä–µ–≤–Ω—è":
        return random.choice(VILLAGES)
    else:
        return random.choice(SPECIAL)

def generate_address():
    city = get_random_location()
    streets = [
        "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è"
    ]
    street = random.choice(streets)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    if city in CITIES:
        prefix = "–≥."
    elif city in PGT:
        prefix = "–ø–≥—Ç"
    elif city in VILLAGES:
        prefix = "–¥."
    else:
        prefix = ""
    return f"{prefix} {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}", city

def get_parent_fio(fam, gender):
    if gender == "–º—É–∂—Å–∫–æ–π":
        name = random.choice(MALE_NAMES)
        return f"{name} {fam}"
    else:
        name = random.choice(FEMALE_NAMES)
        fam_f = fam
        if fam.endswith("–∏–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif fam.endswith("–æ–≤") or fam.endswith("–µ–≤") or fam.endswith("–∏–Ω"):
            fam_f = fam + "–∞"
        elif fam.endswith("—ã–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif fam.endswith("—Å–∫–∏–π"):
            fam_f = fam[:-4] + "—Å–∫–∞—è"
        elif fam.endswith("–æ–π"):
            fam_f = fam[:-2] + "–∞—è"
        elif not fam.endswith("–∞"):
            fam_f = fam + "–∞"
        return f"{name} {fam_f}"

def generate_parents(fam):
    father = get_parent_fio(fam, "–º—É–∂—Å–∫–æ–π")
    mother = get_parent_fio(fam, "–∂–µ–Ω—Å–∫–∏–π")
    father_job = random.choice(JOBS + ORGANIZATIONS)
    mother_job = random.choice(JOBS + ORGANIZATIONS)
    return {
        "father": f"{father} ({father_job})",
        "mother": f"{mother} ({mother_job})"
    }

def generate_birthdate(age: int) -> str:
    now = datetime.now()
    year = now.year - age
    month = random.randint(1, 12)
    days_in_month = [31, 29 if year % 4 == 0 and month == 2 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = random.randint(1, days_in_month[month - 1])
    months_ru = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{day:02d} {months_ru[month - 1]} {year} –≥."

def random_height():
    return f"{random.randint(165, 200)} —Å–º"
def random_weight():
    return f"{random.randint(55, 110)} –∫–≥"

def random_children():
    return random.choice(CHILDREN)

def random_family_status():
    return random.choice(FAMILY_STATUSES)

def generate_traits():
    return random.choice(PERSONALITY_TRAITS)

def random_appearance():
    return random.choice(APPEARANCES)

# ========== RED RP BIO (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω–µ–µ) ==========
def generate_bio_red(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    birthdate = generate_birthdate(age)
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    appearance = random_appearance()
    traits = generate_traits()
    parents = generate_parents(fam)
    residence, birthplace = generate_address()
    childhood = "–° —Å–∞–º–æ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –±—ã–ª –æ–∫—Ä—É–∂—ë–Ω –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π —Ä–æ–¥–∏—Ç–µ–ª–µ–π. –í –¥–µ—Ç—Å—Ç–≤–µ —É—á–∏–ª—Å—è —Ü–µ–Ω–∏—Ç—å —Ç—Ä—É–¥, —É–≤–∞–∂–∞—Ç—å –¥—Ä—É–≥–∏—Ö, –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏–ª —Å —Å–µ–º—å—ë–π, –±—ã–ª –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω."
    adulthood = "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∫–æ–ª—ã –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∫–æ–ª–ª–µ–¥–∂, –∑–∞—Ç–µ–º —Å–ª—É–∂–∏–ª –≤ –∞—Ä–º–∏–∏. –í–µ—Ä–Ω—É–≤—à–∏—Å—å, –Ω–∞—á–∞–ª —Ç—Ä—É–¥–æ–≤—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å—Ç—Ä–æ–∏–ª –∫–∞—Ä—å–µ—Ä—É –∏ –∑–∞–≤–æ–¥–∏–ª –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞—à—ë–ª —Å–≤–æ—ë –ø—Ä–∏–∑–≤–∞–Ω–∏–µ."
    present = "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—é –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –µ—Å—Ç—å –∫—Ä—É–≥ –¥—Ä—É–∑–µ–π –∏ —Ä–æ–¥–Ω—ã—Ö. –ñ–∏–≤—É –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π, —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –ø–æ–º–æ–≥–∞—é –±–ª–∏–∑–∫–∏–º."
    result = (
        "<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"1. –ò–º—è, —Ñ–∞–º–∏–ª–∏—è: {fio}\n"
        f"2. –ü–æ–ª: {gender}\n"
        f"3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"4. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
        f"5. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
        f"6. –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {residence}\n"
        f"7. –û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏: {appearance}\n"
        f"8. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {traits}\n"
        f"9. –†–æ–¥–∏—Ç–µ–ª–∏:\n"
        f"   - –û—Ç–µ—Ü: {parents['father']}\n"
        f"   - –ú–∞—Ç—å: {parents['mother']}\n\n"
        "<b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞</b>\n\n"
        f"1. –î–µ—Ç—Å—Ç–≤–æ –∏ —é–Ω–æ—Å—Ç—å: {childhood}\n"
        f"2. –í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å: {adulthood}\n"
        f"3. –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è: {present}\n"
    )
    return result

# ========== GREEN RP BIO (–ù–û–í–´–ô –§–û–†–£–ú–ù–´–ô –°–¢–ò–õ–¨) ==========
# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –∂–∏–∑–Ω–∏
GREEN_CHILDHOOD = [
    "–° —Å–∞–º–æ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –±—ã–ª –æ–∫—Ä—É–∂—ë–Ω –ª—é–±–æ–≤—å—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞–ª–∏ –≤—Å—ë, —á—Ç–æ–±—ã —è –≤—ã—Ä–æ—Å –¥–æ—Å—Ç–æ–π–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ù–∞—à –¥–æ–º –æ—Ç–ª–∏—á–∞–ª—Å—è —É—é—Ç–æ–º –∏ —Ç–µ–ø–ª–æ–º. –û—Ç–µ—Ü —Å –¥–µ—Ç—Å—Ç–≤–∞ —É—á–∏–ª –º–µ–Ω—è —Ü–µ–Ω–∏—Ç—å —Ç—Ä—É–¥, –∞ –º–∞–º–∞ ‚Äî –±—ã—Ç—å –¥–æ–±—Ä—ã–º –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º. –Ø —á–∞—Å—Ç–æ –±—ã–≤–∞–ª —Å –æ—Ç—Ü–æ–º –Ω–∞ –µ–≥–æ —Ä–∞–±–æ—Ç–µ –∏ –ø–æ–º–æ–≥–∞–ª –º–∞–º–µ –≤ –µ—ë –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π –ª–∞–≤–∫–µ. –£–∂–µ –≤ –¥–µ—Ç—Å—Ç–≤–µ –ø–æ–Ω—è–ª: —á—Ç–æ–±—ã —á–µ–≥–æ-—Ç–æ –¥–æ–±–∏—Ç—å—Å—è, –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å.",
    "–†–æ–¥–∏–ª—Å—è –∏ –≤—ã—Ä–æ—Å –≤ –≥–æ—Ä–æ–¥–µ {city}, –æ–∫—Ä—É–∂—ë–Ω–Ω–æ–º –∂–∏–≤–æ–ø–∏—Å–Ω–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π. –ë—ã–ª —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –º–∞–ª—å—á–∏–∫–æ–º: —Å –¥—Ä—É–∑—å—è–º–∏ –≥—É–ª—è–ª –Ω–∞ —É–ª–∏—Ü–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª –ª–µ—Å–Ω—ã–µ —Ç—Ä–æ–ø–∏–Ω–∫–∏. –í –¥–µ—Ç—Å–∫–æ–º —Å–∞–¥—É –∑–∞–≤—ë–ª –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π, –∞ –≤ —à–∫–æ–ª–µ —É—á—ë–±–∞ –¥–∞–≤–∞–ª–∞—Å—å –ª–µ–≥–∫–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–µ–º—å–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –±–∞–±—É—à–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—É—á–∏–ª–∞ –º–µ–Ω—è –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.",
    "–Ø —Ä–æ–¥–∏–ª—Å—è –≤ —Å–µ–º—å–µ, –≥–¥–µ –ø–∞–ø–∞ —Ä–∞–±–æ—Ç–∞–ª –¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–æ–º, –∞ –º–∞–º–∞ –±—ã–ª–∞ –ø–µ–¥–∞–≥–æ–≥–æ–º. –° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –ø—Ä–∏–≤—ã–∫ –∫ —Ç—Ä—É–¥–æ–ª—é–±–∏—é –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞–±–ª—é–¥–∞—è –∑–∞ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏. –ü–∞–ø–∏–Ω—ã —Ä–∞—Å—Å–∫–∞–∑—ã –æ –¥–∞–ª—å–Ω–∏—Ö —Ä–µ–π—Å–∞—Ö –∏ –º–∞–º–∏–Ω—ã —É—Ä–æ–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–ª–∏ –º–µ–Ω—è —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."
]

GREEN_YOUTH = [
    "–í —à–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—à—ë–ª –æ–±—â–∏–π —è–∑—ã–∫ —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏, –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è. –û—Ç–µ—Ü –ø—Ä–∏—É—á–∞–ª –∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –¥–∞–≤–∞–ª –∫–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏, –∞ —è –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ —É—Å—Ç—Ä–∞–∏–≤–∞–ª –ø–∏—Ä—à–µ—Å—Ç–≤–∞ –≤ —Å—Ç–æ–ª–æ–≤–æ–π. –ü–æ—Å–ª–µ —à–∫–æ–ª—ã –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ª—É—á—à–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —à–∫–æ–ª—å–Ω—ã—Ö –≥–æ–¥–∞—Ö.",
    "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–≤—è—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ—Å—Ç—É–ø–∏–ª –≤ –ê–∫–∞–¥–µ–º–∏—é –§–°–ë ‚Äî –∏—Å–ø–æ–ª–Ω–∏–ª –º–µ—á—Ç—É –¥–µ—Ç—Å—Ç–≤–∞. –£—á—ë–±–∞ –±—ã–ª–∞ –Ω–µ–ø—Ä–æ—Å—Ç–æ–π, –Ω–æ —è —Å–æ–≤–º–µ—â–∞–ª –∑–∞–Ω—è—Ç–∏—è —Å —Ñ—É—Ç–±–æ–ª–æ–º –∏ –¥—Ä—É–∂–µ—Å–∫–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏. –õ–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏–ª –æ–±—â–∏–π —è–∑—ã–∫ —Å –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏–ª –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ.",
    "–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç–∞–ª –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–∏—Å–∫–∞ —Å–µ–±—è: —É–≤–ª–µ–∫–∞–ª—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏ –º—É–∑—ã–∫–æ–π, –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏–ª —Å –¥—Ä—É–∑—å—è–º–∏. –£—á–∏–ª—Å—è –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É—Ä–æ–∫–∏ –∂–∏–∑–Ω–∏, —Å—Ç—Ä–æ–∏–ª –º–µ—á—Ç—ã –æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±—É–¥—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."
]

GREEN_MATURING = [
    "–í –≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å –ª–µ—Ç –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç –ø–æ –±–∏–∑–Ω–µ—Å-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, —É—á—ë–±–∞ –¥–∞–≤–∞–ª–∞—Å—å —Å–ø–æ–∫–æ–π–Ω–æ. –¢–∞–º –≤—Å—Ç—Ä–µ—Ç–∏–ª —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ª—é–±–æ–≤—å, –Ω–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –±—ã–ª–∏ –Ω–µ–¥–æ–ª–≥–∏–º–∏. –í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ø—Ä–∏–æ–±—Ä—ë–ª —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç, –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.",
    "–í 18 –ª–µ—Ç –±—ã–ª –æ—Ç—á–∏—Å–ª–µ–Ω –∏–∑ –∞–∫–∞–¥–µ–º–∏–∏ –∏–∑-–∑–∞ –Ω–µ—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏. –í —ç—Ç–æ –≤—Ä–µ–º—è —Å—É–¥—å–±–∞ —Å–≤–µ–ª–∞ –º–µ–Ω—è —Å –¥–µ–¥—É—à–∫–æ–π, —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Å–±–ª–∏–∑–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–µ–±—è –≤ –Ω–æ–≤—ã—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, –≤—Å—Ç—Ä–µ—Ç–∏–ª –¥–µ–≤—É—à–∫—É, –Ω–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–¥–æ–ª–≥–∏–º–∏. –≠—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞–ª –≤—Ä–µ–º–µ–Ω–µ–º –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.",
    "–ü—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤–æ –≤–∑—Ä–æ—Å–ª—É—é –∂–∏–∑–Ω—å —è –ø–æ–∑–Ω–∞–ª –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ. –†–∞–±–æ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö, –æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª–∏ –º–æ–π –∫—Ä—É–≥–æ–∑–æ—Ä. –Ø –≤—ã–±—Ä–∞–ª –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏–ª –±—ã –º–Ω–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã–∑–æ–≤—ã. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —è —Å—Ç–∞–ª –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–º –≤ —Å–µ–±–µ, –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –ø–æ—Å—Ç—É–ø–∫–∏."
]

GREEN_MATURITY = [
    "–ó—Ä–µ–ª–æ—Å—Ç—å —Å—Ç–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –ø–æ–ª—É—á–∏–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –Ω–∞—á–∞–ª –∫–∞—Ä—å–µ—Ä—É, –ø—Ä–∏–æ–±—Ä—ë–ª –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤. –ò–Ω–æ–≥–¥–∞ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å —Ç—è–∂–µ–ª—ã–º–∏ —É—Ç—Ä–∞—Ç–∞–º–∏, –Ω–æ –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –¥–∞–ª–∏ –Ω–æ–≤—ã–π —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ª—á–æ–∫. –û–±—Ä—ë–ª —É–≤–∞–∂–µ–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, –∑–∞–≤—ë–ª –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.",
    "–Ø –∑–∞–∫–æ–Ω—á–∏–ª –∏–Ω—Å—Ç–∏—Ç—É—Ç —Å –æ—Ç–ª–∏—á–∏–µ–º, –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –∏–ª–∏ –Ω–∞—à—ë–ª —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É. –ü–æ–¥—Ä—É–∂–∏–ª—Å—è —Å –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –º–µ–Ω—è –≤ –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö. –¢–µ—Ä—è–ª –±–ª–∏–∑–∫–∏—Ö, –Ω–æ —ç—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å–¥–µ–ª–∞–ª–∏ –º–µ–Ω—è —Å–∏–ª—å–Ω–µ–µ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–µ–µ.",
    "–°–µ–≥–æ–¥–Ω—è –º–Ω–µ {age}. –Ø –Ω–µ –∂–µ–Ω–∞—Ç –∏ —É –º–µ–Ω—è –Ω–µ—Ç –¥–µ—Ç–µ–π, –Ω–æ —è –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –∂–∏–∑–Ω—å—é –≤ —Ä–æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –ó–∞ —ç—Ç–∏ –≥–æ–¥—ã —è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —É—Å–≤–æ–∏–ª –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ª—é–¥—å–º–∏, –∞ —Ç–∞–∫–∂–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏. –ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, –≥–æ—Ä–∂—É—Å—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–æ–π –∏ —Å—Ç–∞—Ä–∞—é—Å—å –≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏."
]

GREEN_PRESENT = [
    "–°–µ–π—á–∞—Å –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∂–∏–≤—É –≤ —Ä–æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ, —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–æ–≤–æ–∂—É –≤—Ä–µ–º—è —Å —Å–µ–º—å—ë–π. –ù–µ –∑–∞–±—ã–≤–∞—é –æ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö –∏ –º–µ—á—Ç–∞—é –æ–¥–Ω–∞–∂–¥—ã —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ –±–æ–ª–µ–µ –≤–∞–∂–Ω—É—é –¥–ª—è –æ–±—â–µ—Å—Ç–≤–∞. –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —É—Ö–∞–∂–∏–≤–∞—é –∑–∞ –¥–æ–º–æ–º –∏ –æ–≥–æ—Ä–æ–¥–æ–º, —Ä–∞–¥—É—é—Å—å –∫–∞–∂–¥–æ–º—É –¥–Ω—é.",
    "–°–µ–≥–æ–¥–Ω—è –º–Ω–µ {age}, —è –∂–∏–≤—É —Ä—è–¥–æ–º —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, —Ä–∞–±–æ—Ç–∞—é –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–æ—é –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ. –û—Å—Ç–∞—é—Å—å –≤–µ—Ä–µ–Ω —Å–≤–æ–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä–æ–¥–Ω—ã—Ö –∏ –¥—Ä—É–∑–µ–π, –Ω–∞–¥–µ—é—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ—Ç—Å–∫–∏–µ –º–µ—á—Ç—ã –∏ –¥–æ–±–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–µ–≥–æ –≤ –∂–∏–∑–Ω–∏.",
    "–Ø –ø—Ä–æ–¥–æ–ª–∂–∞—é —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –ú–æ–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–∑–≤–æ–ª–∏–ª–∏ –º–Ω–µ –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –º–µ–ª–æ—á–∞–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å–≤—è–∑–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å–µ–π, —É–≥–ª—É–±–ª—è—é –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –∂–∏–∑–Ω—å—é, –ø–æ–º–Ω—è –æ —Ç–æ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –º–∏–≥ —É–Ω–∏–∫–∞–ª–µ–Ω."
]

def generate_bio_green(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fam = fio.split()[-1] if len(fio.split()) > 1 else fio
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    parents = generate_parents(fam)
    residence, birthplace = generate_address()
    family_status = random_family_status()
    children = random_children()
    height = random_height()
    weight = random_weight()
    eyes = random.choice(EYE_COLORS)
    hair = random.choice(HAIR_COLORS)
    bad_habit = random.choice(BAD_HABITS)
    traits = generate_traits()
    appearance = random_appearance()
    photo = "<i>–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ...</i>"

    # –ë–ª–æ–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    childhood = random.choice(GREEN_CHILDHOOD).format(city=birthplace)
    youth = random.choice(GREEN_YOUTH)
    maturing = random.choice(GREEN_MATURING)
    maturity = random.choice(GREEN_MATURITY).format(age=age)
    present = random.choice(GREEN_PRESENT).format(age=age)

    result = (
        f"<b>–ò–º—è:</b> {fio.split()[0] if len(fio.split()) > 1 else fio}\n"
        f"<b>–§–∞–º–∏–ª–∏—è:</b> {fam}\n"
        f"<b>–†–æ–¥–∏—Ç–µ–ª–∏:</b>\n"
        f"   - –û—Ç–µ—Ü: {parents['father']}\n"
        f"   - –ú–∞—Ç—å: {parents['mother']}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {nationality}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthplace}\n"
        f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {residence}\n"
        f"<b>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {family_status}\n"
        f"<b>–î–µ—Ç–∏:</b> {children}\n"
        f"<b>–ü–æ–ª:</b> {gender}\n"
        f"<b>–†–æ—Å—Ç:</b> {height}\n"
        f"<b>–í–µ—Å:</b> {weight}\n"
        f"<b>–¶–≤–µ—Ç –≥–ª–∞–∑:</b> {eyes}\n"
        f"<b>–í–æ–ª–æ—Å—ã:</b> {hair}\n"
        f"<b>–ü–ª–æ—Ö–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:</b> {bad_habit}\n"
        f"<b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {traits}\n"
        f"<b>–õ–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ:</b> {photo}\n\n"
        f"<b>–î–µ—Ç—Å—Ç–≤–æ:</b> {childhood}\n"
        f"<b>–Æ–Ω–æ—Å—Ç—å:</b> {youth}\n"
        f"<b>–í–∑—Ä–æ—Å–ª–µ–Ω–∏–µ:</b> {maturing}\n"
        f"<b>–ó—Ä–µ–ª–æ—Å—Ç—å:</b> {maturity}\n"
        f"<b>–ù–∞—à–∏ –¥–Ω–∏:</b> {present}"
    )
    return result

GREEN_PHOTO_NOTICE = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä GREEN!"

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π Black Russia.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        text = (
            "üåü <b>–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞</b> üåü\n\n"
            "üì¨ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?\n"
            "–ü–∏—à–∏ –º–Ω–µ –≤ Telegram! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –Ω–µ –∫—É—Å–∞—é—Å—å üòâ\n\n"
            "üëâ <a href='https://t.me/bunkoc'>@bunkoc</a> üëà\n\n"
            "<i>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</i>\n"
            "P.S. –ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –±—ã—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É!"
        )
        await message.answer(text, reply_markup=main_menu_kb, parse_mode="HTML")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    elif callback.data == "server_green":
        await state.clear()
        await state.set_state(GreenBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    await callback.answer()

# --- RED ---
@dp.message(RedBioStates.waiting_name)
async def redbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(RedBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(RedBioStates.waiting_gender)
async def redbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(RedBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(RedBioStates.waiting_age)
async def redbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(RedBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(RedBioStates.waiting_nationality)
async def redbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_red(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ RED:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

# --- GREEN ---
@dp.message(GreenBioStates.waiting_name)
async def greenbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(GreenBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(GreenBioStates.waiting_gender)
async def greenbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(GreenBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(GreenBioStates.waiting_age)
async def greenbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(GreenBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(GreenBioStates.waiting_nationality)
async def greenbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio_green(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ GREEN:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await message.answer(f"‚ö†Ô∏è <b>{GREEN_PHOTO_NOTICE}</b>", parse_mode="HTML")
    await state.set_state(MenuStates.waiting_main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
