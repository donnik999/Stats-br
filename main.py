import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import openai

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.environ.get("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
DEEPSEEK_API_KEY = os.environ.get("sk-fab5d466db514e5087656e9c49a7a03d")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

openai.api_base = "https://api.deepseek.com/v1"
openai.api_key = DEEPSEEK_API_KEY

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(KeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –†–ü –±–∏–æ–≥—Ä–∞—Ñ–∏—é"))

class BioStates(StatesGroup):
    waiting_fio = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_nationality = State()

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —à–∞–±–ª–æ–Ω—É.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    await message.answer(text, reply_markup=menu_kb)

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –†–ü –±–∏–æ–≥—Ä–∞—Ñ–∏—é")
async def start_bio(message: types.Message):
    await BioStates.waiting_fio.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")

@dp.message_handler(state=BioStates.waiting_fio)
async def bio_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await BioStates.waiting_age.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):")

@dp.message_handler(state=BioStates.waiting_age)
async def bio_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await BioStates.waiting_gender.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ú—É–∂—Å–∫–æ–π/–ñ–µ–Ω—Å–∫–∏–π):")

@dp.message_handler(state=BioStates.waiting_gender)
async def bio_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await BioStates.waiting_nationality.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")

@dp.message_handler(state=BioStates.waiting_nationality)
async def bio_nationality(message: types.Message, state: FSMContext):
    await state.update_data(nationality=message.text)
    data = await state.get_data()
    await state.finish()

    prompt = (
        f"–ù–∞–ø–∏—à–∏ RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ —Ñ–æ—Ä—É–º –ø–æ —à–∞–±–ª–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–§–ò–û: {data['fio']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data['nationality']}\n"
        "–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (–¥–µ—Ç—Å—Ç–≤–æ, —é–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç–æ—è—â–µ–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Å–µ–º—å—è, —Ö–æ–±–±–∏, –≤–Ω–µ—à–Ω–æ—Å—Ç—å –∏ —Ç.–¥.) –ø—Ä–∏–¥—É–º–∞–π —Å–∞–º, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –±–µ–∑ —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π, –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π, –±–µ–∑ –æ—à–∏–±–æ–∫. –ú–∏–Ω–∏–º—É–º 10 —Å—Ç—Ä–æ–∫ –Ω–∞ —Ä–∞–∑–¥–µ–ª –¥–µ—Ç—Å—Ç–≤–æ, —é–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç–æ—è—â–µ–µ.\n"
        "–®–∞–±–ª–æ–Ω:\n"
        "–§–ò–û:\n–ü–æ–ª:\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:\n–í–æ–∑—Ä–∞—Å—Ç:\n–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:\n–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\n–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–æ–∏–Ω—Å–∫–æ–π —Å–ª—É–∂–±–µ(–¥–ª—è –º—É–∂—á–∏–Ω):\n–°–µ–º—å—è:\n–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏:\n–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:\n–í–∞—à–µ —Ñ–æ—Ç–æ:\n–î–µ—Ç—Å—Ç–≤–æ(–û—Ç –¥–µ—Å—è—Ç–∏ —Å—Ç—Ä–æ–∫):\n–Æ–Ω–æ—Å—Ç—å(–û—Ç –¥–µ—Å—è—Ç–∏ —Å—Ç—Ä–æ–∫):\n–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è(–û—Ç –¥–µ—Å—è—Ç–∏ —Å—Ç—Ä–æ–∫):\n–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n–ú–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:.\n–ò–º–µ–µ—Ç—Å—è –ª–∏ —Å—É–¥–∏–º–æ—Å—Ç—å?:\n–í–∞—à–µ —Ö–æ–±–±–∏:"
    )
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–∏—à–µ—à—å –≥—Ä–∞–º–æ—Ç–Ω—ã–µ RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Ñ–æ—Ä—É–º–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1200,
        )
        bio_text = response.choices[0].message["content"]
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        return

    await message.answer("–í–æ—Ç –≤–∞—à–∞ RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è:\n\n" + bio_text)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
