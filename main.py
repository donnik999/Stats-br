import os
import random
import logging
import getpass
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = ("8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw")
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN: ")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton("üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="RED", callback_data="server_red")]
    ]
)

class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_nationality = State()

# --- –°–ü–†–ê–í–û–ß–ù–ò–ö–ò ---
CITIES = [
    "–ê—Ä–∑–∞–º–∞—Å", "–Æ–∂–Ω—ã–π", "–ë–∞—Ç—ã—Ä–µ–≤–æ", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ", "–ú–æ—Ä—Å–∫–æ–µ",
    "–ë—É—Å–∞–µ–≤–æ", "–ì–æ—Ä–∫–∏", "–ù–æ–≤—ã–π –ê—Ä–∑–∞–º–∞—Å", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫"
]
STREETS = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "–õ–µ—Å–Ω–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–°–æ–ª–Ω–µ—á–Ω–∞—è", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è",
    "–®–æ—Å—Å–µ–π–Ω–∞—è", "–ü–∞—Ä–∫–æ–≤–∞—è", "–ü–æ–±–µ–¥—ã", "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–ú–∏—Ä–∞",
    "–û–∑–µ—Ä–Ω–∞—è", "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è", "–ó–∞—Ä–µ—á–Ω–∞—è", "–¢—Ä—É–¥–æ–≤–∞—è", "–°–µ–≤–µ—Ä–Ω–∞—è"
]
APPEARANCES = [
    "–í—ã—Å–æ–∫–∏–π, —Å—Ç—Ä–æ–π–Ω—ã–π, —Ç–µ–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã, –∫–∞—Ä–∏–µ –≥–ª–∞–∑–∞, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞.",
    "–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–ø–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã, –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞.",
    "–ö—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, —Ä—É—Å—ã–µ –≤–æ–ª–æ—Å—ã, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞.",
    "–ù–µ–≤—ã—Å–æ–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã, —Å–µ—Ä—ã–µ –≥–ª–∞–∑–∞.",
    "–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç, —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –¥–æ–±—Ä–æ–¥—É—à–Ω–∞—è —É–ª—ã–±–∫–∞, –∑–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞."
]
CHARACTERS = [
    "–í–µ–∂–ª–∏–≤—ã–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å.",
    "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, –æ–±–ª–∞–¥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.",
    "–°–ø–æ–∫–æ–π–Ω—ã–π, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π, —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–¥—å–º–∏.",
    "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π.",
    "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –ª—é–±–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ."
]
HOBBIES = [
    "—á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
    "–∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ —Ñ—É—Ç–±–æ–ª–æ–º",
    "–∏–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ –∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ–≤",
    "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
    "—Ä—ã–±–∞–ª–∫–∞ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
]

def generate_address():
    city = random.choice(CITIES)
    street = random.choice(STREETS)
    house = random.randint(1, 99)
    apt = random.randint(1, 120)
    return f"–≥. {city}, —É–ª. {street}, –¥. {house}, –∫–≤. {apt}", city

def generate_birthdate(age: int) -> str:
    now = datetime.now()
    year = now.year - age
    month = random.randint(1, 12)
    days_in_month = [31, 29 if year % 4 == 0 and month == 2 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = random.randint(1, days_in_month[month - 1])
    months_ru = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{day:02d} {months_ru[month - 1]} {year} –≥."

def generate_bio(data: dict) -> str:
    fio = data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    gender = data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = int(data.get("age", 18))
    birthdate = generate_birthdate(age)
    nationality = data.get("nationality", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    residence, birthplace = generate_address()
    appearance = random.choice(APPEARANCES)
    character = random.choice(CHARACTERS)
    hobby = random.choice(HOBBIES)

    # –ë–ª–æ–∫–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–∞!)
    childhood_youth_blocks = [
        f"–†–æ–¥–∏–ª—Å—è –≤ –≥–æ—Ä–æ–¥–µ {birthplace}. –° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –ø—Ä–æ—è–≤–ª—è–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º, –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏–ª –Ω–∞ —É–ª–∏—Ü–µ —Å –¥—Ä—É–∑—å—è–º–∏.",
        "–í –¥–µ—Ç—Å—Ç–≤–µ –æ—Ç–ª–∏—á–∞–ª—Å—è –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –ª—é–±–∏–ª –∏–≥—Ä–∞—Ç—å –≤ –ø–æ–¥–≤–∏–∂–Ω—ã–µ –∏–≥—Ä—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ –¥–æ–º—É.",
        "–®–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã –ø—Ä–æ—à–ª–∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ: —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Å—Ç–æ–º –≤ –∫–ª–∞—Å—Å–µ.",
        "–° —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–æ—è–≤–ª—è–ª —É–≤–∞–∂–µ–Ω–∏–µ –∫ –æ–∫—Ä—É–∂–∞—é—â–∏–º, –±—ã–ª –≤–æ—Å–ø–∏—Ç–∞–Ω –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "–í –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –Ω–∞—á–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º, –ø–æ—Å–µ—â–∞–ª –∫—Ä—É–∂–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏."
    ]
    adulthood_blocks = [
        "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∫–æ–ª—ã –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∫–æ–ª–ª–µ–¥–∂, –≥–¥–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ –¥—É—à–µ.",
        "–ù–∞—á–∞–ª —Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É, —Ç—Ä—É–¥–∏–ª—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö, –Ω–∞–±–∏—Ä–∞–ª—Å—è –æ–ø—ã—Ç–∞ –∏ –∑–Ω–∞–Ω–∏–π.",
        "–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å –ø—Ä–∏–Ω–µ—Å–ª–∞ —Å–≤–æ–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è, –Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∏—Ç—å—Å—è –ø–µ—Ä–≤—ã—Ö —É—Å–ø–µ—Ö–æ–≤.",
        "–°—Ç—Ä–µ–º–∏–ª—Å—è –∫ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–ª —É—á–∏—Ç—å—Å—è –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.",
        "–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–æ–±—Ä—ë–ª –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏ –≥–æ—Ä–æ–¥–∞."
    ]
    present_blocks = [
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º, –Ω–µ –∑–∞–±—ã–≤–∞—è —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è {hobby}.",
        "–°—Ç–∞—Ä–∞–µ—Ç—Å—è –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –æ–±—â–µ—Å—Ç–≤—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–æ–±—Ä—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏.",
        "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤ –±—É–¥—É—â–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –∏ –≤–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –≥–æ—Ä–æ–¥–∞.",
        "–°—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —ç—Ç–æ —á–µ—Å—Ç–Ω–æ—Å—Ç—å, —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º."
    ]

    childhood_youth = "\n".join(random.sample(childhood_youth_blocks, 3))
    adulthood = "\n".join(random.sample(adulthood_blocks, 2))
    present = "\n".join(random.sample(present_blocks, 2))

    # –ò—Ç–æ–≥–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–∞!
    result = (
        "<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"1. –ò–º—è, —Ñ–∞–º–∏–ª–∏—è: {fio}\n"
        f"2. –ü–æ–ª: {gender}\n"
        f"3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"4. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
        f"5. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
        f"6. –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {residence}\n"
        f"7. –û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏: {appearance}\n"
        f"8. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {character}\n"
        f"9. –•–æ–±–±–∏: {hobby}\n\n"
        "<b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞</b>\n\n"
        f"1. –î–µ—Ç—Å—Ç–≤–æ –∏ —é–Ω–æ—Å—Ç—å:\n{childhood_youth}\n\n"
        f"2. –í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:\n{adulthood}\n\n"
        f"3. –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è:\n{present}"
    )
    return result

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö RP-–±–∏–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –†–ü-–±–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üìû –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        text = (
            "üåü <b>–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞</b> üåü\n\n"
            "üì¨ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é?\n"
            "–ü–∏—à–∏ –º–Ω–µ –≤ Telegram! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –Ω–µ –∫—É—Å–∞—é—Å—å üòâ\n\n"
            "üëâ <a href='https://t.me/bunkoc'>@bunkoc</a> üëà\n\n"
            "<i>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</i>\n"
            "P.S. –ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –±—ã—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É!"
        )
        await message.answer(text, reply_markup=main_menu_kb, parse_mode="HTML")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("<b>1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", parse_mode="HTML")
    await callback.answer()

@dp.message(RedBioStates.waiting_name)
async def redbio_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    await state.update_data(fio=fio)
    await state.set_state(RedBioStates.waiting_gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("–ú—É–∂—Å–∫–æ–π")], [KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")], [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", reply_markup=kb, parse_mode="HTML")

@dp.message(RedBioStates.waiting_gender)
async def redbio_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    await state.set_state(RedBioStates.waiting_age)
    await message.answer("<b>3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 18 –¥–æ 65):</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")

@dp.message(RedBioStates.waiting_age)
async def redbio_age(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    try:
        age = int(message.text.strip())
        if age < 18 or age > 65:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 65.")
        return
    await state.update_data(age=age)
    await state.set_state(RedBioStates.waiting_nationality)
    await message.answer("<b>4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>", parse_mode="HTML")

@dp.message(RedBioStates.waiting_nationality)
async def redbio_nationality(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    nationality = message.text.strip().capitalize()
    await state.update_data(nationality=nationality)
    data = await state.get_data()
    bio = generate_bio(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ RED:</b>\n\n" + bio, parse_mode="HTML", reply_markup=main_menu_kb)
    await state.set_state(MenuStates.waiting_main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
