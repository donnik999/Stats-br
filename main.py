import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio

API_TOKEN = "8124119601:AAEgnFwCalzIKU15uHpIyWlCRbu4wvNEAUw"

# ------------- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM -------------

class MenuStates(StatesGroup):
    waiting_main_menu = State()
    choosing_server = State()

# –û–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ FSM, –∏—Ö –º–æ–∂–Ω–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∏—Ç—å)
class RedBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class GreenBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class BlueBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class YellowBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class OrangeBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class PinkBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class PurpleBioStates(StatesGroup):
    waiting_nickname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()

class BrownBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class CyanBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

class WhiteBioStates(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_nationality = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_childhood = State()
    waiting_youth = State()
    waiting_adult = State()
    waiting_present = State()

# ------------- –ö–Ω–æ–ø–∫–∏ -------------

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –°–æ–∑–¥–∞—Ç—å –†–ü-–ë–∏–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üì© –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")]
    ],
    resize_keyboard=True
)

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–∏–∫, –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
server_names = [
    "RED", "GREEN", "BLUE", "YELLOW", "ORANGE",
    "PINK", "PURPLE", "BROWN", "CYAN", "WHITE"
]
server_callbacks = [
    "server_red", "server_green", "server_blue", "server_yellow", "server_orange",
    "server_pink", "server_purple", "server_brown", "server_cyan", "server_white"
]
server_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text=server_names[i], callback_data=server_callbacks[i])] for i in range(10)]
)

contact_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url="https://t.me/BUNKOC")]
    ]
)

# ------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö -------------

def random_appearance():
    heights = [str(h) + " —Å–º" for h in range(160, 201, 5)]
    weights = [str(w) + " –∫–≥" for w in range(50, 101, 5)]
    eyes = ["–ö–∞—Ä–∏–µ", "–ì–æ–ª—É–±—ã–µ", "–°–µ—Ä—ã–µ", "–ó–µ–ª–µ–Ω—ã–µ", "–ß–µ—Ä–Ω—ã–µ"]
    hairs = ["–†—É—Å—ã–µ", "–ö–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "–¢–µ–º–Ω—ã–µ", "–°–≤–µ—Ç–ª–æ-—Ä—É—Å—ã–µ", "–ß–µ—Ä–Ω—ã–µ", "–¢–µ–º–Ω–æ-—Ä—É—Å—ã–µ", "–ë–ª–æ–Ω–¥"]
    body = ["–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–ö—Ä–µ–ø–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–•—É–¥–æ—â–∞–≤–æ–µ", "–ü–ª–æ—Ç–Ω–æ–µ"]
    return (
        f"–†–æ—Å—Ç: {random.choice(heights)}\n"
        f"–í–µ—Å: {random.choice(weights)}\n"
        f"–¶–≤–µ—Ç –≥–ª–∞–∑: {random.choice(eyes)}\n"
        f"–í–æ–ª–æ—Å—ã: {random.choice(hairs)}\n"
        f"–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {random.choice(body)}"
    )

def random_hobby():
    hobbies = [
        "–ë–æ–∫—Å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω", "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "–ú—É–∑—ã–∫–∞", 
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥", "–°–ø–æ—Ä—Ç", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 
        "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–ò–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ"
    ]
    return ", ".join(random.sample(hobbies, random.randint(1, 3)))

def random_education():
    return random.choice([
        "–í—ã—Å—à–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", 
        "–í—ã—Å—à–µ–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞)", "–í—ã—Å—à–µ–µ (—é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è)", 
        "–í—ã—Å—à–µ–µ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞)", "–í—ã—Å—à–µ–µ (–∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–µ –¥–µ–ª–æ)"
    ])

def random_marital():
    return random.choice([
        "–ù–µ –∂–µ–Ω–∞—Ç", "–ñ–µ–Ω–∞—Ç", "–†–∞–∑–≤–µ–¥—ë–Ω", "–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ", "–í–¥–æ–≤–∞/–≤–¥–æ–≤–µ—Ü"
    ])

def random_city():
    return random.choice([
        "–ê—Ä–∑–∞–º–∞—Å", "–Æ–∂–Ω—ã–π", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫", "–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    ])

def random_date_of_birth(age: int):
    today = datetime.today()
    year = today.year - age
    month = random.randint(1, 12)
    if month == 2:
        days = 29 if year % 4 == 0 else 28
    elif month in [4, 6, 9, 11]:
        days = 30
    else:
        days = 31
    day = random.randint(1, days)
    return f"{day:02d}.{month:02d}.{year}"

# ------------- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∞–Ω–∫–µ—Ç -------------

def default_generate_bio(data):
    return (
        f"–ò–º—è: {data['name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {data['surname']}\n"
        f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data['nationality']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"{random_appearance()}\n"
        f"–£–≤–ª–µ—á–µ–Ω–∏–µ: {random_hobby()}\n\n"
        f"–î–µ—Ç—Å—Ç–≤–æ:\n{data['childhood']}\n\n"
        f"–Æ–Ω–æ—Å—Ç—å:\n{data['youth']}\n\n"
        f"–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:\n{data['adult']}\n\n"
        f"–ù–∞—à–µ –≤—Ä–µ–º—è:\n{data['present']}"
    )

def purple_generate_bio(data):
    nickname = data.get("nickname", "Nick Name")
    nationality = data.get("nationality", "–†—É—Å—Å–∫–∏–π")
    age = int(data.get("age", 18))
    gender = data.get("gender", "–ú—É–∂—Å–∫–æ–π")
    city = random_city()
    birthdate = random_date_of_birth(age)
    marital = random_marital()
    education = random_education()
    height = random.randint(165, 200)
    weight = random.randint(55, 110)
    eyes = random.choice(["–ö–∞—Ä–∏–µ", "–ì–æ–ª—É–±—ã–µ", "–°–µ—Ä—ã–µ", "–ó–µ–ª–µ–Ω—ã–µ", "–ß–µ—Ä–Ω—ã–µ"])
    hair = random.choice(["–†—É—Å—ã–µ", "–ö–∞—à—Ç–∞–Ω–æ–≤—ã–µ", "–¢–µ–º–Ω—ã–µ", "–°–≤–µ—Ç–ª–æ-—Ä—É—Å—ã–µ", "–ß–µ—Ä–Ω—ã–µ", "–¢–µ–º–Ω–æ-—Ä—É—Å—ã–µ", "–ë–ª–æ–Ω–¥"])
    bodytype = random.choice(["–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–ö—Ä–µ–ø–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–•—É–¥–æ—â–∞–≤–æ–µ", "–ü–ª–æ—Ç–Ω–æ–µ"])
    hobby = random_hobby()
    childhood = (
        f"{nickname} —Ä–æ–¥–∏–ª—Å—è –≤ {city}. –° —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç –ø—Ä–æ—è–≤–ª—è–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ {hobby.split(',')[0].lower()}. "
        f"–í —à–∫–æ–ª–µ –æ—Ç–ª–∏—á–∞–ª—Å—è {random.choice(['–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é', '—Ç—Ä—É–¥–æ–ª—é–±–∏–µ–º', '–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é'])}, "
        f"—Ä–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –µ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è."
    )
    youth = (
        f"–í –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ {nickname.split()[0]} –Ω–∞—á–∞–ª –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è {hobby.split(',')[0].lower()}. "
        f"–û–Ω —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —à–∫–æ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –ø—Ä–æ—è–≤–ª—è–ª –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –∏ —Ä–∞—Å—à–∏—Ä—è–ª –∫—Ä—É–≥–æ–∑–æ—Ä."
    )
    adult_life = (
        f"–ó–∞–∫–æ–Ω—á–∏–≤ —à–∫–æ–ª—É, –ø–æ—Å—Ç—É–ø–∏–ª –≤ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{education}'. "
        f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–ª –Ω–∞–≤—ã–∫–∏ –≤ {hobby.split(',')[0].lower()}."
    )
    present = (
        f"–°–µ–≥–æ–¥–Ω—è {nickname} –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, "
        f"–æ–±—â–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ."
    )
    return (
        f"–ù–∏–∫–Ω–µ–π–º: {nickname}\n"
        f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        f"–î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}, –≥. {city}\n"
        f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {marital}\n"
        f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–†–æ—Å—Ç: {height} —Å–º\n"
        f"–í–µ—Å: {weight} –∫–≥\n"
        f"–¶–≤–µ—Ç –≥–ª–∞–∑: {eyes}\n"
        f"–í–æ–ª–æ—Å—ã: {hair}\n"
        f"–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {bodytype}\n"
        f"–£–≤–ª–µ—á–µ–Ω–∏–µ: {hobby}\n\n"
        f"–î–µ—Ç—Å—Ç–≤–æ:\n{childhood}\n\n"
        f"–Æ–Ω–æ—Å—Ç—å:\n{youth}\n\n"
        f"–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å:\n{adult_life}\n\n"
        f"–ù–∞—à–µ –≤—Ä–µ–º—è:\n{present}"
    )

# ------------- –•–µ–Ω–¥–ª–µ—Ä—ã -------------

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –†–ü-–ë–∏–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!</b>\n\n"
        "–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ—ë —Ä–æ–ª–µ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!\n\n"
        "‚ÑπÔ∏è <i>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ –Ω–∏–∂–µ.</i>",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )
    await state.set_state(MenuStates.waiting_main_menu)

@dp.message(MenuStates.waiting_main_menu)
async def menu_handler(message: types.Message, state: FSMContext):
    if message.text == "üåü –°–æ–∑–¥–∞—Ç—å –†–ü-–ë–∏–æ–≥—Ä–∞—Ñ–∏—é":
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏:</b>",
            reply_markup=server_kb,
            parse_mode="HTML"
        )
        await state.set_state(MenuStates.choosing_server)
    elif message.text == "üì© –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º":
        await message.answer(
            "<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:</b>\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!",
            reply_markup=contact_kb,
            parse_mode="HTML"
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ üëá")

@dp.callback_query(MenuStates.choosing_server)
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    cdata = callback.data
    await callback.answer()
    # RED
    if cdata == "server_red":
        await state.clear()
        await state.set_state(RedBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # GREEN
    elif cdata == "server_green":
        await state.clear()
        await state.set_state(GreenBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # BLUE
    elif cdata == "server_blue":
        await state.clear()
        await state.set_state(BlueBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # YELLOW
    elif cdata == "server_yellow":
        await state.clear()
        await state.set_state(YellowBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # ORANGE
    elif cdata == "server_orange":
        await state.clear()
        await state.set_state(OrangeBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # PINK
    elif cdata == "server_pink":
        await state.clear()
        await state.set_state(PinkBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # PURPLE (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    elif cdata == "server_purple":
        await state.clear()
        await state.set_state(PurpleBioStates.waiting_nickname)
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (—Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç '–ò–º—è –§–∞–º–∏–ª–∏—è', –Ω–∞–ø—Ä–∏–º–µ—Ä Sander Kligan):"
        )
    # BROWN
    elif cdata == "server_brown":
        await state.clear()
        await state.set_state(BrownBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # CYAN
    elif cdata == "server_cyan":
        await state.clear()
        await state.set_state(CyanBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    # WHITE
    elif cdata == "server_white":
        await state.clear()
        await state.set_state(WhiteBioStates.waiting_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")

# ---------------------- UNIVERSAL FSM HANDLER (–∫—Ä–æ–º–µ PURPLE) ----------------------

async def universal_fsm(message: types.Message, state: FSMContext, bio_states, server_name):
    state_map = [
        ('waiting_name', "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"),
        ('waiting_surname', "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"),
        ('waiting_nationality', "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—á–∏—Å–ª–æ–º):"),
        ('waiting_age', "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", True),
        ('waiting_gender', "–î–µ—Ç—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"),
        ('waiting_childhood', "–Æ–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"),
        ('waiting_youth', "–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"),
        ('waiting_adult', "–ù–∞—à–µ –≤—Ä–µ–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"),
    ]
    current_state = await state.get_state()
    idx = [s[0] for s in state_map].index(current_state.split(":")[-1])
    field_names = ['name', 'surname', 'nationality', 'age', 'gender', 'childhood', 'youth', 'adult', 'present']
    if idx == 3:  # –≤–æ–∑—Ä–∞—Å—Ç -> –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–∞
        try:
            age = int(message.text.strip())
        except:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(age=age)
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
                [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(getattr(bio_states, "waiting_gender"))
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=kb)
        return
    if idx == 4:  # –ø–æ–ª
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await cmd_start(message, state)
            return
        gender = message.text.strip()
        if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
            return
        await state.update_data(gender=gender.capitalize())
        await state.set_state(getattr(bio_states, "waiting_childhood"))
        await message.answer("–î–µ—Ç—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        return
    if idx < len(state_map) - 1:
        await state.update_data(**{field_names[idx]: message.text.strip()})
        await state.set_state(getattr(bio_states, state_map[idx+1][0]))
        await message.answer(state_map[idx+1][1])
    else:
        await state.update_data(present=message.text.strip())
        data = await state.get_data()
        bio = default_generate_bio(data)
        await message.answer(
            f"<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –¥–ª—è {server_name}:</b>\n\n" + bio,
            reply_markup=main_menu_kb, parse_mode="HTML"
        )
        await state.set_state(MenuStates.waiting_main_menu)

# FSM –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
for bio_states, server_name in [
    (RedBioStates, "RED"), (GreenBioStates, "GREEN"), (BlueBioStates, "BLUE"), (YellowBioStates, "YELLOW"),
    (OrangeBioStates, "ORANGE"), (PinkBioStates, "PINK"), (BrownBioStates, "BROWN"),
    (CyanBioStates, "CYAN"), (WhiteBioStates, "WHITE")
]:
    for field in ["waiting_name", "waiting_surname", "waiting_nationality", "waiting_age", "waiting_gender",
                  "waiting_childhood", "waiting_youth", "waiting_adult", "waiting_present"]:
        dp.message.register(lambda m, s, b=bio_states, n=server_name: universal_fsm(m, s, b, n), getattr(bio_states, field))

# ---------------------- PURPLE FSM ----------------------

@dp.message(PurpleBioStates.waiting_nickname)
async def purple_nickname(message: types.Message, state: FSMContext):
    nickname = message.text.strip()
    if "_" in nickname or len(nickname.split()) != 2:
        await message.answer(
            "‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è –§–∞–º–∏–ª–∏—è' —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –±–µ–∑ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π. –ü—Ä–∏–º–µ—Ä: Sander Kligan"
        )
        return
    await state.update_data(nickname=nickname)
    await state.set_state(PurpleBioStates.waiting_nationality)
    await message.answer("2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")

@dp.message(PurpleBioStates.waiting_nationality)
async def purple_nationality(message: types.Message, state: FSMContext):
    await state.update_data(nationality=message.text.strip().capitalize())
    await state.set_state(PurpleBioStates.waiting_age)
    await message.answer("3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 16 –¥–æ 65):")

@dp.message(PurpleBioStates.waiting_age)
async def purple_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 16 or age > 65:
            raise ValueError
    except:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 65.")
        return
    await state.update_data(age=age)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(PurpleBioStates.waiting_gender)
    await message.answer("4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=kb)

@dp.message(PurpleBioStates.waiting_gender)
async def purple_gender(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=gender.capitalize())
    data = await state.get_data()
    bio = purple_generate_bio(data)
    await message.answer("<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ PURPLE:</b>\n\n" + bio, reply_markup=main_menu_kb, parse_mode="HTML")
    await state.set_state(MenuStates.waiting_main_menu)

# ------------- –ó–∞–ø—É—Å–∫ -------------

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
